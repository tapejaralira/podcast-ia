const IntegracaoIA = require('./integracaoIA');

class IntegracaoIAExtendida extends IntegracaoIA {
    constructor() {
        super();
        // Inicializar fetch de forma s√≠ncrona
        this.garantirFetch();
    }

    garantirFetch() {
        // Verificar se fetch est√° dispon√≠vel globalmente
        if (typeof global.fetch === 'undefined' && typeof fetch === 'undefined') {
            console.log('‚ö†Ô∏è Fetch n√£o dispon√≠vel, modo fallback ativo');
            this.fetchDisponivel = false;
        } else {
            this.fetchDisponivel = true;
            // Se fetch n√£o est√° global mas existe, torn√°-lo global
            if (typeof global.fetch === 'undefined' && typeof fetch !== 'undefined') {
                global.fetch = fetch;
            }
        }
    }

    async gerarTexto(prompt, maxTokens = 150) {
        try {
            // Recarregar .env para garantir que est√° atualizado
            require('dotenv').config();
            
            // Verificar se OpenAI est√° configurada
            if (!process.env.OPENAI_API_KEY || 
                process.env.OPENAI_API_KEY === 'sua_chave_openai_aqui' ||
                !process.env.OPENAI_API_KEY.startsWith('sk-')) {
                console.log('‚ö†Ô∏è OpenAI n√£o configurada adequadamente, usando fallback');
                return this.respostaFallback(prompt);
            }

            // Verificar se fetch est√° dispon√≠vel
            if (!this.fetchDisponivel) {
                console.log('‚ö†Ô∏è Fetch n√£o dispon√≠vel, usando fallback');
                return this.respostaFallback(prompt);
            }

            console.log('üß† Gerando texto com OpenAI GPT-4...');
            
            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
                    messages: [
                        {
                            role: 'user',
                            content: prompt
                        }
                    ],
                    max_tokens: maxTokens,
                    temperature: 0.8,
                    presence_penalty: 0.1,
                    frequency_penalty: 0.1
                })
            });

            if (!response.ok) {
                throw new Error(`OpenAI API erro: ${response.status}`);
            }

            const data = await response.json();
            const textoGerado = data.choices[0]?.message?.content?.trim();

            if (!textoGerado) {
                throw new Error('Resposta vazia da OpenAI');
            }

            console.log(`‚úÖ Texto gerado: ${textoGerado.length} caracteres`);
            return textoGerado;

        } catch (error) {
            console.log(`‚ùå Erro na OpenAI: ${error.message}`);
            console.log('üîÑ Usando resposta fallback...');
            return this.respostaFallback(prompt);
        }
    }

    respostaFallback(prompt) {
        // Respostas simples baseadas em palavras-chave do prompt
        const promptLower = prompt.toLowerCase();
        
        if (promptLower.includes('introdu√ß√£o') || promptLower.includes('introduz')) {
            return `**Tain√°:** Fala, meu povo! T√° come√ßando mais um BubuiA News!

**Ira√≠:** E aqui √© o Ira√≠, trazendo as not√≠cias de dentro da rede!

**Tain√°:** Bora ver o que rolou por aqui hoje!`;
        }
        
        if (promptLower.includes('card√°pio') || promptLower.includes('manchetes')) {
            return `**Tain√°:** Eita, pessoal! O card√°pio de hoje t√° recheadinho!

**Ira√≠:** Vamos ver as principais not√≠cias que separamos.`;
        }
        
        if (promptLower.includes('esporte') || promptLower.includes('garantido')) {
            return `**Ira√≠:** E no esporte, galera...

**Tain√°:** Garantido no cora√ß√£o sempre, n√© meu povo!

**Ira√≠:** Os dois bois s√£o patrim√¥nio nosso!

**Tain√°:** Vermelho e branco √© vida!`;
        }
        
        if (promptLower.includes('cultura') || promptLower.includes('amaz√¥nic')) {
            return `**Tain√°:** A cultura amaz√¥nica √© nossa riqueza!

**Ira√≠:** Tradi√ß√µes que v√™m de gera√ß√µes, n√©?

**Tain√°:** A floresta ensina quem sabe escutar!`;
        }
        
        if (promptLower.includes('encerramento') || promptLower.includes('despedida')) {
            return `**Tain√°:** Valeu, meu povo! Foi massa estar com voc√™s!

**Ira√≠:** At√© o pr√≥ximo epis√≥dio, pessoal!

**Tain√°:** Comenta a√≠ nas redes sociais!`;
        }
        
        // Resposta gen√©rica
        return `**Tain√°:** Eita, interessante isso!

**Ira√≠:** Pois √©, n√©? Vamos conversar sobre isso.`;
    }
}

module.exports = IntegracaoIAExtendida;