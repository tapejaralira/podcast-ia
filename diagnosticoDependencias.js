#!/usr/bin/env node

const path = require('path');

function checarMetodo(obj, metodo) {
    return obj && typeof obj[metodo] === 'function';
}

console.log('üîç === DIAGN√ìSTICO DE DEPEND√äNCIAS INTERNAS ===\n');

let erros = 0;

try {
    const GeradorRoteiro = require('./gerarRoteiro');
    const gerador = new GeradorRoteiro();
    console.log('‚úÖ GeradorRoteiro importado');
    if (checarMetodo(gerador, 'gerarRoteiro')) {
        console.log('   ‚úÖ gerarRoteiro() dispon√≠vel');
    } else {
        console.log('   ‚ùå gerarRoteiro() N√ÉO encontrado'); erros++;
    }
    if (checarMetodo(gerador, 'gerarEpisodioCompleto')) {
        console.log('   ‚úÖ gerarEpisodioCompleto() dispon√≠vel');
    } else {
        console.log('   ‚ùå gerarEpisodioCompleto() N√ÉO encontrado'); erros++;
    }
} catch (e) {
    console.log('‚ùå Erro ao importar GeradorRoteiro:', e.message); erros++;
}

try {
    const ClassificadorContextual = require('./classificadorContextual');
    const classificador = new ClassificadorContextual();
    console.log('‚úÖ ClassificadorContextual importado');
    if (checarMetodo(classificador, 'classificarNoticia')) {
        console.log('   ‚úÖ classificarNoticia() dispon√≠vel');
    } else {
        console.log('   ‚ùå classificarNoticia() N√ÉO encontrado'); erros++;
    }
    if (checarMetodo(classificador, 'obterConfiguracaoVoz')) {
        console.log('   ‚úÖ obterConfiguracaoVoz() dispon√≠vel');
    } else {
        console.log('   ‚ùå obterConfiguracaoVoz() N√ÉO encontrado'); erros++;
    }
} catch (e) {
    console.log('‚ùå Erro ao importar ClassificadorContextual:', e.message); erros++;
}

try {
    const IntegracaoIA = require('./integracaoIA');
    const ia = new IntegracaoIA();
    console.log('‚úÖ IntegracaoIA importado');
    if (checarMetodo(ia, 'processarRoteiroCompleto')) {
        console.log('   ‚úÖ processarRoteiroCompleto() dispon√≠vel');
    } else {
        console.log('   ‚ùå processarRoteiroCompleto() N√ÉO encontrado'); erros++;
    }
} catch (e) {
    console.log('‚ùå Erro ao importar IntegracaoIA:', e.message); erros++;
}

try {
    const IntegradorElevenLabs = require('./integradorElevenLabs');
    if (IntegradorElevenLabs && (IntegradorElevenLabs.IntegradorElevenLabs || IntegradorElevenLabs)) {
        const Integrador = IntegradorElevenLabs.IntegradorElevenLabs || IntegradorElevenLabs;
        const integrador = new Integrador();
        console.log('‚úÖ IntegradorElevenLabs importado');
        if (checarMetodo(integrador, 'gerarAudioTTS')) {
            console.log('   ‚úÖ gerarAudioTTS() dispon√≠vel');
        } else {
            console.log('   ‚ùå gerarAudioTTS() N√ÉO encontrado'); erros++;
        }
    } else {
        console.log('‚ùå IntegradorElevenLabs n√£o exporta classe'); erros++;
    }
} catch (e) {
    console.log('‚ùå Erro ao importar IntegradorElevenLabs:', e.message); erros++;
}

try {
    const GeradorFalasIA = require('./geradorFalasIA');
    const geradorFalas = GeradorFalasIA.GeradorFalasIA || GeradorFalasIA;
    const falas = new geradorFalas();
    console.log('‚úÖ GeradorFalasIA importado');
    if (checarMetodo(falas, 'gerarRoteiroCompleto')) {
        console.log('   ‚úÖ gerarRoteiroCompleto() dispon√≠vel');
    } else {
        console.log('   ‚ùå gerarRoteiroCompleto() N√ÉO encontrado'); erros++;
    }
} catch (e) {
    console.log('‚ùå Erro ao importar GeradorFalasIA:', e.message); erros++;
}

try {
    const ComentariosContextuais = require('./comentariosContextuais');
    const comentarios = new ComentariosContextuais();
    console.log('‚úÖ ComentariosContextuais importado');
    if (checarMetodo(comentarios, 'processarNoticiaComReacao')) {
        console.log('   ‚úÖ processarNoticiaComReacao() dispon√≠vel');
    } else {
        console.log('   ‚ùå processarNoticiaComReacao() N√ÉO encontrado'); erros++;
    }
} catch (e) {
    console.log('‚ùå Erro ao importar ComentariosContextuais:', e.message); erros++;
}

try {
    const MixadorAutomatico = require('./mixadorAutomatico');
    const mixador = new MixadorAutomatico();
    console.log('‚úÖ MixadorAutomatico importado');
    if (checarMetodo(mixador, 'mixarAudios')) {
        console.log('   ‚úÖ mixarAudios() dispon√≠vel');
    } else {
        console.log('   ‚ùå mixarAudios() N√ÉO encontrado'); erros++;
    }
} catch (e) {
    console.log('‚ùå Erro ao importar MixadorAutomatico:', e.message); erros++;
}

console.log('\nüìä Resumo de depend√™ncias:');
if (erros === 0) {
    console.log('üéâ Todas as depend√™ncias internas est√£o OK!');
} else {
    console.log(`‚ö†Ô∏è Foram encontrados ${erros} problemas de depend√™ncia interna.`);
}
