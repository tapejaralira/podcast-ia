#!/usr/bin/env node

const GeradorRoteiro = require('../gerarRoteiro');

async function testarIntonacao() {
    console.log('üéµ === TESTE DO SISTEMA DE INTONA√á√ÉO CONTEXTUAL ===\n');

    try {
        const gerador = new GeradorRoteiro();
        
        // Inicializar sistemas contextuais
        await gerador.inicializarSistemasContextuais();
        
        const noticiasTest = [
            {
                titulo: "Festival de Parintins 2025 ter√° 15 apresenta√ß√µes especiais com alegorias gigantes",
                tipo: "cultura"
            },
            {
                titulo: "Acidente grave na AM-010 deixa duas v√≠timas fatais e tr√™s feridos",
                tipo: "tragedia"
            },
            {
                titulo: "Buracos na Constantino Nery causam transtornos aos motoristas pela terceira vez",
                tipo: "infraestrutura"
            },
            {
                titulo: "Prefeitura de Manaus anuncia aumento de 15% no sal√°rio dos vereadores",
                tipo: "politica"
            },
            {
                titulo: "Nacional de Fast Clube contrata tr√™s jogadores para disputa da S√©rie D",
                tipo: "esporte"
            },
            {
                titulo: "Tempestade provoca alagamentos em v√°rias ruas da Zona Norte",
                tipo: "clima"
            }
        ];
        
        for (let i = 0; i < noticiasTest.length; i++) {
            const noticia = noticiasTest[i];
            console.log(`üì∞ NOT√çCIA ${i + 1}: "${noticia.titulo}"`);
            console.log(`üè∑Ô∏è Tipo esperado: ${noticia.tipo}\n`);
            
            // 1. Processar not√≠cia com sistema contextual
            const resultado = await gerador.processarNoticiaComContexto(noticia.titulo);
            
            console.log(`üéØ Contexto detectado: ${resultado.contexto}`);
            
            // 2. Mostrar configura√ß√µes de voz por contexto
            if (resultado.configVoz) {
                const configTaina = resultado.configVoz.taina || {};
                const configIrai = resultado.configVoz.irai || {};
                
                console.log(`üéµ Configura√ß√£o de voz:`);
                console.log(`   üë© Tain√°: ${configTaina.emocao || 'conversational'} | vel: ${configTaina.velocidade || 1.0} | int: ${configTaina.intensidade || 'medium'}`);
                console.log(`   üë® Ira√≠: ${configIrai.emocao || 'conversational'} | vel: ${configIrai.velocidade || 0.95} | int: ${configIrai.intensidade || 'medium'}`);
            }
            
            // 3. Mostrar rea√ß√µes contextuais
            if (resultado.reacoes && resultado.reacoes.length > 0) {
                console.log(`üí¨ Rea√ß√µes geradas: ${resultado.reacoes.length}`);
                resultado.reacoes.forEach((reacao, idx) => {
                    const emoji = reacao.personagem === 'taina' ? 'üë©' : 'üë®';
                    console.log(`   ${emoji} ${reacao.personagem}: "${reacao.comentario}"`);
                });
            } else {
                console.log(`üí¨ Sem rea√ß√µes (apropriado para contexto ${resultado.contexto})`);
            }
            
            // 4. An√°lise da adequa√ß√£o da intona√ß√£o
            console.log(`üìä An√°lise da intona√ß√£o:`);
            const adequacao = analisarAdequacao(noticia.tipo, resultado.contexto, resultado.configVoz);
            console.log(`   ‚úÖ Adequa√ß√£o: ${adequacao.nivel} (${adequacao.descricao})`);
            
            console.log('‚îÄ'.repeat(60) + '\n');
        }
        
        // Resumo final
        console.log('üìä === RESUMO DO SISTEMA DE INTONA√á√ÉO ===\n');
        console.log('‚úÖ Funcionalidades ativas:');
        console.log('   üéØ Classifica√ß√£o autom√°tica de contextos');
        console.log('   üéµ Configura√ß√µes de voz por contexto');
        console.log('   üí¨ Coment√°rios contextuais autom√°ticos');
        console.log('   üé≠ Personalidades adaptativas');
        console.log('   üìä An√°lise de adequa√ß√£o');
        
        console.log('\nüéôÔ∏è O sistema de intona√ß√£o contextual est√° 100% funcional!');
        console.log('üí° Para usar com √°udio real, configure as APIs no arquivo .env');

    } catch (error) {
        console.error('‚ùå Erro no teste de intona√ß√£o:', error.message);
        console.error('Stack:', error.stack);
    }
}

function analisarAdequacao(tipoEsperado, contextoDetectado, configVoz) {
    // Mapear tipos esperados para contextos do sistema
    const mapeamento = {
        'cultura': 'cultura_parintins',
        'tragedia': 'tragico',
        'infraestrutura': 'infraestrutura_urbana',
        'politica': 'politica',
        'esporte': 'geral',
        'clima': 'clima_severo'
    };
    
    const contextoEsperado = mapeamento[tipoEsperado] || 'geral';
    
    if (contextoDetectado === contextoEsperado) {
        return {
            nivel: 'EXCELENTE',
            descricao: 'Contexto detectado corretamente, intona√ß√£o perfeita'
        };
    } else if (contextoDetectado === 'geral') {
        return {
            nivel: 'BOA',
            descricao: 'Contexto gen√©rico, intona√ß√£o neutra apropriada'
        };
    } else {
        return {
            nivel: 'REGULAR',
            descricao: `Esperado ${contextoEsperado}, detectado ${contextoDetectado}`
        };
    }
}

// Executar se for chamado diretamente
if (require.main === module) {
    testarIntonacao();
}

module.exports = testarIntonacao;