#!/usr/bin/env node

const GeradorRoteiro = require('../gerarRoteiro');
const fs = require('fs');
const path = require('path');

async function gerarEpisodioCompleto() {
    console.log('üéôÔ∏è === BUBUIA NEWS - GERA√á√ÉO DE EPIS√ìDIO COMPLETO ===\n');

    try {
        const gerador = new GeradorRoteiro();

        console.log('üîß Inicializando sistemas...');
        console.log('üìÖ Data:', gerador.obterDataFormatada());
        console.log('üé≠ Apresentadores: Tain√° (Parintins) + Ira√≠ (Manaus)\n');

        // Gerar epis√≥dio completo com contextos
        const episodio = await gerador.gerarEpisodioCompleto();

        // Salvar roteiro
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const roteiroPath = path.join(__dirname, '..', 'episodios', `episodio_${timestamp}.md`);
        
        // Criar diret√≥rio se n√£o existir
        const episodiosDir = path.dirname(roteiroPath);
        if (!fs.existsSync(episodiosDir)) {
            fs.mkdirSync(episodiosDir, { recursive: true });
        }

        // Formatar roteiro com metadados
        const nomeArquivoAudio = typeof episodio.audio === 'string' ? 
            path.basename(episodio.audio) : 
            episodio.audio.arquivo_simulado || 'episodio_simulado.mp3';

        const roteiroCompleto = `<!-- EPIS√ìDIO CONTEXTUAL AUTOM√ÅTICO -->
<!-- Data: ${new Date().toLocaleString('pt-BR')} -->
<!-- Contextos utilizados: ${episodio.roteiro.metadados.contextos_utilizados.join(', ')} -->
<!-- √Åudio: ${nomeArquivoAudio} -->

${episodio.roteiro.texto}

---

## üìä AN√ÅLISE T√âCNICA

**Contextos detectados:** ${episodio.roteiro.metadados.contextos_utilizados.length}
**Arquivo de √°udio:** ${nomeArquivoAudio}
**Tipo de gera√ß√£o:** ${episodio.audio.tipo || 'real'}
**Timestamp:** ${episodio.timestamp}

### üéØ Contextos por not√≠cia:
${episodio.roteiro.contextos.map(c => 
    `- **${c.contexto}**: "${c.noticia.substring(0, 50)}..."`
).join('\n')}

### üí¨ Rea√ß√µes geradas:
${episodio.roteiro.contextos.map(c => 
    c.reacoes?.length > 0 ? 
    `- **${c.noticia.substring(0, 30)}...**: ${c.reacoes.length} rea√ß√£o(√µes)` : 
    `- **${c.noticia.substring(0, 30)}...**: Sem rea√ß√µes`
).join('\n')}

### üéµ Simula√ß√£o de √°udio:
${episodio.audio.tipo === 'simulacao' ? `
- **Segmentos:** ${episodio.audio.segmentos}
- **Dura√ß√£o:** ${episodio.audio.duracao_total}
- **Falas Tain√°:** ${episodio.audio.personagens.taina}
- **Falas Ira√≠:** ${episodio.audio.personagens.irai}
- **Blocos:** ${episodio.audio.blocos.join(', ')}
` : '√Åudio real gerado'}
`;

        fs.writeFileSync(roteiroPath, roteiroCompleto);

        // Relat√≥rio final
        console.log('‚úÖ === EPIS√ìDIO GERADO COM SUCESSO! ===\n');
        console.log(`üìÑ Roteiro: ${roteiroPath}`);
        
        if (episodio.audio.tipo === 'simulacao') {
            console.log(`üéµ √Åudio: Simula√ß√£o (${episodio.audio.duracao_total})`);
            console.log(`üìä Segmentos: ${episodio.audio.segmentos}`);
            console.log(`üë© Tain√°: ${episodio.audio.personagens.taina} falas | üë® Ira√≠: ${episodio.audio.personagens.irai} falas`);
        } else {
            console.log(`üéµ √Åudio: ${episodio.audio}`);
        }
        
        console.log(`üìä Contextos: ${episodio.roteiro.metadados.contextos_utilizados.length} diferentes`);
        console.log(`üí¨ Rea√ß√µes: ${episodio.roteiro.contextos.reduce((total, c) => total + (c.reacoes?.length || 0), 0)} geradas`);
        
        console.log('\nüéØ Contextos utilizados:');
        episodio.roteiro.metadados.contextos_utilizados.forEach(contexto => {
            console.log(`   - ${contexto}`);
        });

        console.log('\nüéâ BubuiA News pronto para o ar!');
        console.log('üí° Execute: npm run gerar-audio para criar o arquivo de √°udio final');

        return episodio;

    } catch (error) {
        console.error('‚ùå Erro na gera√ß√£o:', error.message);
        console.error('üìç Stack:', error.stack);
        throw error;
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    gerarEpisodioCompleto().catch(console.error);
}

module.exports = gerarEpisodioCompleto;