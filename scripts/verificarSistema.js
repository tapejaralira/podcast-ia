#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

class VerificadorSistema {
    constructor() {
        this.erros = [];
        this.avisos = [];
        this.sucessos = [];
    }

    async verificarCompleto() {
        console.log('üîç === VERIFICA√á√ÉO COMPLETA DO SISTEMA ===\n');

        try {
            // 1. Verificar arquivo principal
            this.verificarGerarRoteiro();
            
            // 2. Verificar depend√™ncias
            this.verificarDependencias();
            
            // 3. Verificar template
            this.verificarTemplate();
            
            // 4. Verificar arquivos de dados
            this.verificarArquivosDados();
            
            // 5. Relat√≥rio final
            this.gerarRelatorio();
            
        } catch (error) {
            console.error('‚ùå Erro na verifica√ß√£o:', error.message);
        }
    }

    verificarGerarRoteiro() {
        console.log('üìù Verificando gerarRoteiro.js...\n');
        
        try {
            const geradorPath = path.join(__dirname, '..', 'gerarRoteiro.js');
            const conteudo = fs.readFileSync(geradorPath, 'utf8');
            
            // Verificar se arquivo pode ser carregado
            try {
                delete require.cache[require.resolve(geradorPath)];
                const GeradorRoteiro = require(geradorPath);
                this.sucessos.push('‚úÖ gerarRoteiro.js carrega sem erros de sintaxe');
                
                // Tentar instanciar
                const gerador = new GeradorRoteiro();
                this.sucessos.push('‚úÖ GeradorRoteiro instancia corretamente');
                
                // Verificar m√©todos essenciais
                const metodosEssenciais = [
                    'gerarRoteiro',
                    'gerarGiriaTaina',
                    'gerarGiriaIrai',
                    'obterDataFormatada',
                    'gerarComentarioBoiTaina',
                    'gerarComentarioBoiIrai',
                    'gerarNoticia1',
                    'gerarNoticia2', 
                    'gerarNoticia3',
                    'gerarNoticiaEsporte',
                    'gerarEventoDestaque',
                    'gerarCuriosidadeRegional',
                    'obterComentarioOuvinte',
                    'gerarManchetePrincipal'
                ];
                
                metodosEssenciais.forEach(metodo => {
                    if (typeof gerador[metodo] === 'function') {
                        this.sucessos.push(`‚úÖ M√©todo ${metodo}() existe`);
                    } else {
                        this.erros.push(`‚ùå M√©todo ${metodo}() n√£o encontrado`);
                    }
                });
                
                // Verificar se m√©todos retornam valores v√°lidos
                console.log('üß™ Testando m√©todos...');
                this.testarMetodos(gerador);
                
            } catch (instError) {
                this.erros.push(`‚ùå Erro ao instanciar GeradorRoteiro: ${instError.message}`);
            }
            
        } catch (loadError) {
            this.erros.push(`‚ùå Erro ao carregar gerarRoteiro.js: ${loadError.message}`);
        }
    }

    testarMetodos(gerador) {
        const metodosParaTestar = [
            'gerarGiriaTaina',
            'gerarGiriaIrai', 
            'obterDataFormatada',
            'gerarComentarioBoiTaina',
            'gerarEventoDestaque',
            'gerarCuriosidadeRegional',
            'gerarManchetePrincipal'
        ];

        metodosParaTestar.forEach(metodo => {
            try {
                const resultado = gerador[metodo]();
                if (resultado && resultado.length > 0) {
                    this.sucessos.push(`‚úÖ ${metodo}() retorna: "${resultado.substring(0, 30)}..."`);
                } else {
                    this.avisos.push(`‚ö†Ô∏è ${metodo}() retorna valor vazio`);
                }
            } catch (error) {
                this.erros.push(`‚ùå Erro ao executar ${metodo}(): ${error.message}`);
            }
        });
    }

    verificarDependencias() {
        console.log('\nüì¶ Verificando depend√™ncias...\n');
        
        const dependencias = [
            'dialogosEspontaneos.js',
            'integracaoIA.js', 
            'gerenciadorEventos.js',
            'sistemaRevisao.js'
        ];

        dependencias.forEach(dep => {
            try {
                const depPath = path.join(__dirname, '..', dep);
                if (fs.existsSync(depPath)) {
                    // Tentar carregar
                    delete require.cache[require.resolve(depPath)];
                    require(depPath);
                    this.sucessos.push(`‚úÖ ${dep} carrega corretamente`);
                } else {
                    this.erros.push(`‚ùå ${dep} n√£o encontrado`);
                }
            } catch (error) {
                this.erros.push(`‚ùå Erro em ${dep}: ${error.message}`);
            }
        });
    }

    verificarTemplate() {
        console.log('\nüìÑ Verificando template...\n');
        
        try {
            const templatePath = path.join(__dirname, '..', 'templates', 'roteiro-template-novo.md');
            
            if (fs.existsSync(templatePath)) {
                const template = fs.readFileSync(templatePath, 'utf8');
                
                // Verificar vari√°veis no template
                const variaveisEncontradas = template.match(/\{\{[^}]+\}\}/g) || [];
                const variaveisUnicas = [...new Set(variaveisEncontradas)];
                
                this.sucessos.push(`‚úÖ Template encontrado com ${variaveisUnicas.length} vari√°veis`);
                
                // Verificar se h√° vari√°veis problem√°ticas
                const variaveisProblematicas = variaveisUnicas.filter(v => 
                    v.includes('undefined') || 
                    v.includes('${') ||
                    v.length < 4
                );
                
                if (variaveisProblematicas.length > 0) {
                    this.erros.push(`‚ùå Vari√°veis problem√°ticas no template: ${variaveisProblematicas.join(', ')}`);
                } else {
                    this.sucessos.push('‚úÖ Todas as vari√°veis do template est√£o bem formatadas');
                }
                
            } else {
                this.erros.push('‚ùå Template roteiro-template-novo.md n√£o encontrado');
            }
            
        } catch (error) {
            this.erros.push(`‚ùå Erro ao verificar template: ${error.message}`);
        }
    }

    verificarArquivosDados() {
        console.log('\nüìä Verificando arquivos de dados...\n');
        
        const arquivosDados = [
            'data/personagens.json',
            'data/girias.json',
            'data/podcast-config.json'
        ];

        arquivosDados.forEach(arquivo => {
            try {
                const caminhoArquivo = path.join(__dirname, '..', arquivo);
                
                if (fs.existsSync(caminhoArquivo)) {
                    const conteudo = fs.readFileSync(caminhoArquivo, 'utf8');
                    JSON.parse(conteudo); // Verificar se √© JSON v√°lido
                    this.sucessos.push(`‚úÖ ${arquivo} √© um JSON v√°lido`);
                } else {
                    this.avisos.push(`‚ö†Ô∏è ${arquivo} n√£o encontrado (pode usar fallback)`);
                }
                
            } catch (error) {
                this.erros.push(`‚ùå Erro em ${arquivo}: ${error.message}`);
            }
        });
    }

    gerarRelatorio() {
        console.log('\nüìã === RELAT√ìRIO DE VERIFICA√á√ÉO ===\n');
        
        console.log(`‚úÖ SUCESSOS (${this.sucessos.length}):`);
        this.sucessos.forEach(sucesso => console.log(`  ${sucesso}`));
        
        if (this.avisos.length > 0) {
            console.log(`\n‚ö†Ô∏è AVISOS (${this.avisos.length}):`);
            this.avisos.forEach(aviso => console.log(`  ${aviso}`));
        }
        
        if (this.erros.length > 0) {
            console.log(`\n‚ùå ERROS (${this.erros.length}):`);
            this.erros.forEach(erro => console.log(`  ${erro}`));
            console.log('\nüö® CORRE√á√ïES NECESS√ÅRIAS ANTES DO TESTE!');
        } else {
            console.log('\nüéâ SISTEMA PRONTO PARA TESTE!');
            console.log('üí° Execute: npm run teste-episodio');
        }
        
        // Salvar relat√≥rio
        const relatorio = {
            timestamp: new Date().toISOString(),
            sucessos: this.sucessos,
            avisos: this.avisos,
            erros: this.erros,
            status: this.erros.length === 0 ? 'PRONTO' : 'PRECISA_CORRECAO'
        };
        
        const relatorioPath = path.join(__dirname, '..', 'verificacao-sistema.json');
        fs.writeFileSync(relatorioPath, JSON.stringify(relatorio, null, 2));
        console.log(`\nüìÑ Relat√≥rio salvo em: verificacao-sistema.json`);
    }
}

// Executar verifica√ß√£o
const verificador = new VerificadorSistema();
verificador.verificarCompleto();