// roteiro/gerarRoteiro.js
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import OpenAI from 'openai';
import axios from 'axios';
import * as cheerio from 'cheerio';
import { GoogleGenerativeAI } from '@google/generative-ai';
import 'dotenv/config';

// --- Configura√ß√£o do Roteirista ---
// Mude para 'gemini' para testar a nova API, ou 'openai' para usar a padr√£o.
const ROTEIRISTA_API = 'gemini'; // Op√ß√µes: 'openai', 'gemini'

// --- Configura√ß√µes e Constantes ---
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const geminiModel = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

// --- Caminhos dos Arquivos ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const PROJECT_ROOT = path.resolve(__dirname, '..');

const DATA_DIR = path.join(PROJECT_ROOT, 'data');
const PAUTA_FILE = path.join(DATA_DIR, 'episodio-do-dia.json');
const SUGESTOES_ABERTURA_FILE = path.join(DATA_DIR, 'sugestoes-abertura.json');
const PERSONAGENS_FILE = path.join(DATA_DIR, 'personagens.json');

const ROTEIRO_DIR = path.join(PROJECT_ROOT, 'roteiro');
const CONFIG_ROTEIRO_FILE = path.join(ROTEIRO_DIR, 'config-roteiro.json');
const TEMPLATE_FILE = path.join(ROTEIRO_DIR, 'roteiro-template.md');

const OUTPUT_DIR = path.join(PROJECT_ROOT, 'episodios');

// --- Constante de Normaliza√ß√£o para TTS ---
const TTS_NORMALIZATION_PROMPT = `
### REGRAS DE FORMATA√á√ÉO PARA √ÅUDIO (OBRIGAT√ìRIO)
- **Normaliza√ß√£o para TTS:** Converta o texto de sa√≠da para um formato adequado para text-to-speech. Garanta que n√∫meros, s√≠mbolos e abrevia√ß√µes sejam expandidos para maior clareza quando lidos em voz alta. Expanda todas as abrevia√ß√µes para suas formas faladas completas.
- **Ritmo e √änfase:** Em vez de usar tags SSML, controle o ritmo e a √™nfase usando pontua√ß√£o. Use retic√™ncias (...) para pausas dram√°ticas ou hesita√ß√£o. Use LETRAS MAI√öSCULAS para dar √äNFASE a palavras ou frases importantes.

- **Exemplos de Normaliza√ß√£o:**
  - "R$ 42,50" ‚Üí "quarenta e dois reais e cinquenta centavos"
  - "2¬∫" ‚Üí "segundo"
  - "Dr." ‚Üí "Doutor"
  - "Av." ‚Üí "Avenida"
  - "100km" ‚Üí "cem quil√¥metros"
  - "100%" ‚Üí "cem por cento"
  - "01/01/2024" ‚Üí "primeiro de janeiro de dois mil e vinte e quatro"
  - "14:30" ‚Üí "duas e trinta da tarde"
`;

// --- Constantes de Roteiro ---
const TRILHA_MAP = {
    "‚ö´Ô∏è": "trilha_tensao_leve.mp3",
    "üü°": "trilha_informativa_neutra.mp3",
    "üî¥": "trilha_reflexiva.mp3",
    "üöÄ": "trilha_tecnologica_upbeat.mp3",
    "üé¨": "trilha_divertida_pop.mp3",
    "üé≠": "trilha_cultural_regional.mp3",
    "üëΩ": "trilha_misteriosa_humor.mp3"
};

const INSPIRACAO_INICIO_CENA = [
    "In√≠cio com Exclama√ß√£o/Surpresa: Um apresentador chama a aten√ß√£o do outro de forma energ√©tica sobre a not√≠cia.",
    "In√≠cio com Curiosidade/Mist√©rio: Um apresentador introduz o tema com uma pergunta ou de forma enigm√°tica para despertar o interesse.",
    "In√≠cio com Rea√ß√£o √† Manchete: Um apresentador l√™ a manchete e o outro reage imediatamente, seja com espanto, humor ou ceticismo.",
    "In√≠cio 'Fofoca'/Rede Social: A not√≠cia √© introduzida como algo que est√° 'bombando' ou 'bubuiando' nas redes.",
    "In√≠cio com Pergunta Ret√≥rica: Um apresentador faz uma pergunta ao outro que conecta com o cerne da not√≠cia para iniciar a discuss√£o.",
    "In√≠cio 'Hot Take': Um apresentador pede a opini√£o direta e sem filtros do outro logo de cara.",
    "In√≠cio com Contraponto/Debate: Um apresentador se mostra c√©tico ou pessimista e o outro tenta apresentar uma vis√£o diferente.",
    "In√≠cio com Intera√ß√£o do Ouvinte: A discuss√£o come√ßa a partir de uma suposta mensagem ou pergunta de um ouvinte."
];

// --- Fun√ß√µes Principais ---

async function fetchFullText(url) {
    try {
        const { data: html } = await axios.get(url, { headers: { 'User-Agent': 'BubuiaNews-Bot/1.0' }});
        const $ = cheerio.load(html);
        let articleBody = '';
        
        const acriticaBody = $('div.ceRPNp'); 
        if (acriticaBody.length > 0) {
            acriticaBody.find('p[class*="styled__Paragraph"]').each((i, el) => {
                articleBody += $(el).text() + ' ';
            });
        }

        if (!articleBody) {
             articleBody = 
                $('div[itemprop="articleBody"]').text() || 
                $('div.post-content').text() || 
                $('div.editorianoticia').text() ||
                $('article').text();
        }
        
        return articleBody.replace(/\s\s+/g, ' ').trim();
    } catch (error) {
        console.error(`  [ERRO] Falha ao buscar texto completo de: ${url}`);
        return null;
    }
}

async function gerarDialogo(promptData) {
    const { tipo, noticia, personagens, direcao_cena, data_fallback, audiencia } = promptData;
    let prompt;

    let infoTaina = '';
    let infoIrai = '';
    let infoAudiencia = '';

    if (personagens && audiencia) {
        infoTaina = `- Tain√°: ${personagens.taina.perfil_geral}. Apelidos para Ira√≠: ${personagens.taina.formas_de_chamar_o_outro.join(', ')}.`;
        infoIrai = `- Ira√≠: ${personagens.irai.perfil_geral}. Apelidos para Tain√°: ${personagens.irai.formas_de_chamar_o_outro.join(', ')}.`;
        infoAudiencia = `- Audi√™ncia: ${audiencia.perfil}. Formas de chamar os ouvintes: ${audiencia.formas_de_chamar.join(', ')}.`;
    } else if (audiencia) {
        infoAudiencia = `- Audi√™ncia: ${audiencia.perfil}. Formas de chamar os ouvintes: ${audiencia.formas_de_chamar.join(', ')}.`;
    } else if (personagens) {
        infoTaina = `- Tain√°: ${personagens.taina.perfil_geral}.`;
        infoIrai = `- Ira√≠: ${personagens.irai.perfil_geral}.`;
    }
    
    switch (tipo) {
        case 'cold_open':
            prompt = `Voc√™ √© um roteirista do podcast "Bubuia News". Crie um di√°logo de 15 a 20 segundos para o "Cold Open". Tain√° deve contar para Ira√≠, como se fosse um segredo, a seguinte not√≠cia:
- T√≠tulo: ${noticia.titulo_principal}
- Resumo Combinado: ${noticia.fontes.map(f => f.resumo).join(' ')}

${TTS_NORMALIZATION_PROMPT}

Responda APENAS com o di√°logo.`;
            break;
        case 'fallback_cold_open':
            // L√≥gica para escolher o prompt de Cold Open mais adequado
            if (data_fallback.titulo.includes("Mensagem") || data_fallback.titulo.includes("Curiosidade")) {
                // Prompt para quando o fallback √© uma mensagem de ouvinte ou curiosidade gen√©rica
                prompt = `Voc√™ √© um roteirista do podcast "Bubuia News". Crie um di√°logo de 15 a 20 segundos para o "Cold Open".
                A ideia √© que Tain√° leia uma mensagem carinhosa de um ouvinte (ou uma curiosidade aleat√≥ria) para Ira√≠, e ele reage de forma calorosa e aut√™ntica.

                - Conte√∫do a ser lido por Tain√°: "${data_fallback.texto}"

                ${TTS_NORMALIZATION_PROMPT}

                Exemplo de in√≠cio: "Tain√°: Mano, se liga s√≥ nessa mensagem que chegou pra gente..."
                Responda APENAS com o di√°logo.`;
            } else {
                // Prompt para quando √© uma efem√©ride hist√≥rica real, ligada a uma data
                prompt = `Voc√™ √© um roteirista criativo para o podcast "Bubuia News". Sua miss√£o √© criar um di√°logo de 15 a 20 segundos para o "Cold Open" entre Tain√° e Ira√≠.

                **Contexto:**
                A conversa deve girar em torno do seguinte fato hist√≥rico ou data comemorativa. A intera√ß√£o precisa ser natural, onde um apresentador compartilha a informa√ß√£o e o outro reage com curiosidade ou de forma positiva.

                - **T√≠tulo do Fato:** ${data_fallback.titulo}
                - **Descri√ß√£o:** "${data_fallback.texto}"

                **Inspira√ß√£o para o In√≠cio (Use como base, n√£o precisa ser id√™ntico):**
                - "Ira√≠: Mana... se liga nessa..."
                - "Tain√°: Rapaz... Olha isso... Hoje..."
                - "Ira√≠: Ei, hoje √© comemorado o dia..."
                - "Tain√°: Olha, acabei de ver que hoje √© dia d..."
                - "Ira√≠: Sabia que hoje, dia dois de julho, √©..."

                ${TTS_NORMALIZATION_PROMPT}

                **Instru√ß√£o Final:** Responda APENAS com o di√°logo entre Tain√° e Ira√≠.`;
            }
            break;
        case 'cardapio':
             prompt = `Voc√™ √© o roteirista Ira√≠ do podcast "Bubuia News". Com base nos t√≠tulos a seguir, crie uma chamada carism√°tica e regional para o que vem por a√≠ no programa, no estilo 'E hoje no Bubuia, a gente vai de...'
- T√≠tulos: ${noticia.titulos.join('; ')}

${TTS_NORMALIZATION_PROMPT}

Responda APENAS com a fala do Ira√≠.`;
            break;
        case 'saudacao_taina':
        case 'despedida_taina':
            const acao = tipo === 'saudacao_taina' ? 'uma sauda√ß√£o de abertura curta e energ√©tica' : 'uma despedida curta, animada e convidativa';
            prompt = `Voc√™ √© a roteirista da Tain√° para o podcast "Bubuia News". Crie ${acao}.
${infoAudiencia}
Instru√ß√£o: Ela deve se dirigir diretamente √† audi√™ncia usando uma das formas de chamar.

${TTS_NORMALIZATION_PROMPT}

Responda APENAS com a fala da Tain√°.`;
            break;
        case 'noticia_principal':
        case 'super_noticia_principal':
            let tom_cena = "de forma neutra e informativa.";
            if (noticia && noticia.classification) {
                const id = noticia.classification.id.split(' ')[0];
                if (['üöÄ', 'üé¨', 'üé≠', 'üëΩ'].includes(id)) tom_cena = "de forma animada e divertida.";
                if (['üî¥', '‚ö´Ô∏è'].includes(id)) tom_cena = "com um tom de seriedade e preocupa√ß√£o.";
            }
            const dialogoLength = tipo === 'super_noticia_principal' ? 'APROFUNDADO (6 a 8 falas)' : 'natural e conciso (4 a 6 falas)';

            prompt = `Voc√™ √© um roteirista do podcast "Bubuia News". Crie um di√°logo ${dialogoLength} entre Tain√° e Ira√≠ sobre a not√≠cia abaixo.

### INSTRU√á√ïES DE DIRE√á√ÉO
- **Perfis dos Personagens:**
${infoTaina}
${infoIrai}
- **Perfil da Audi√™ncia:** ${infoAudiencia}
- **Tom da Cena:** Discutam a not√≠cia ${tom_cena}
- **Conte√∫do da Not√≠cia:** ${noticia.texto_completo}
- **Inspira√ß√£o para o In√≠cio:** Use a seguinte ideia como inspira√ß√£o para come√ßar o di√°logo, mas sinta-se livre para variar: "${direcao_cena}". O importante √© capturar a ess√™ncia da sugest√£o.

${TTS_NORMALIZATION_PROMPT}

### REGRAS DE INTERA√á√ÉO (OBRIGAT√ìRIO)
- √â essencial que eles usem os apelidos um do outro e que, em algum momento, um deles se dirija diretamente √† audi√™ncia.

Responda APENAS com o di√°logo.`;
            break;
        default:
            return "// Placeholder para: " + tipo;
    }

    try {
        if (ROTEIRISTA_API === 'gemini') {
            console.log(`  -> Gerando di√°logo com Gemini...`);
            const result = await geminiModel.generateContent(prompt);
            const response = await result.response;
            return response.text();
        } else { // Padr√£o √© OpenAI
            console.log(`  -> Gerando di√°logo com OpenAI...`);
            const response = await openai.chat.completions.create({
                model: "gpt-4o", messages: [{ role: "user", content: prompt }], temperature: 0.85,
            });
            return response.choices[0].message.content;
        }
    } catch (error) {
        console.error(`‚ùå Erro ao gerar di√°logo para '${tipo}' usando ${ROTEIRISTA_API}: ${error.message}`);
        return `// Erro ao gerar di√°logo para ${tipo}.`;
    }
}

async function gerarRoteiro() {
    console.log('üìú Bubuia News - Iniciando gera√ß√£o do roteiro final...');
    
    // Carrega todos os arquivos necess√°rios
    const [pauta, sugestoes, config, personagensData, template] = await Promise.all([
        fs.readFile(PAUTA_FILE, 'utf-8').then(JSON.parse),
        fs.readFile(SUGESTOES_ABERTURA_FILE, 'utf-8').then(JSON.parse),
        fs.readFile(CONFIG_ROTEIRO_FILE, 'utf-8').then(JSON.parse),
        fs.readFile(PERSONAGENS_FILE, 'utf-8').then(JSON.parse),
        fs.readFile(TEMPLATE_FILE, 'utf-8'),
    ]).catch(err => {
        console.error("üî• Erro ao carregar um dos arquivos de entrada. Verifique se os scripts 'analisar' e 'sugerir' foram executados.", err);
        process.exit(1);
    });
    
    const personagens = { taina: personagensData.apresentadores[0], irai: personagensData.apresentadores[1] };
    const audiencia = personagensData.audiencia;
    let roteiroFinal = template;
    const dataAtualString = new Date().toLocaleDateString('pt-BR', { day: 'numeric', month: 'long', year: 'numeric'});
    
    roteiroFinal = roteiroFinal.replace('{{DATA_ATUAL}}', dataAtualString);
    roteiroFinal = roteiroFinal.replace('{{TRILHA_ABERTURA}}', 'trilha_cultural_regional.mp3'); 

    
    // L√ìGICA DE DECIS√ÉO CORRIGIDA PARA O COLD OPEN
    let coldOpenDialogo = "";
    console.log(`[LOG] Prioridade de Cold Open definida como: "${config.prioridade_cold_open}"`);

    if (config.prioridade_cold_open === 'efemeride') {
        if (sugestoes.efemeride && sugestoes.efemeride.texto) {
            console.log('[LOG] Usando a Efem√©ride Regional (prioridade do editor).');
            coldOpenDialogo = await gerarDialogo({ tipo: 'fallback_cold_open', data_fallback: sugestoes.efemeride, personagens });
        } else {
            console.log('[LOG] Prioridade era Efem√©ride, mas n√£o foi encontrada. Usando not√≠cia como fallback, se existir.');
            coldOpenDialogo = sugestoes.noticia 
                ? await gerarDialogo({ tipo: 'cold_open', noticia: sugestoes.noticia, personagens, audiencia })
                : "// Nenhuma op√ß√£o de Cold Open dispon√≠vel.";
        }
    } else { // A prioridade √© 'noticia'
        if (sugestoes.noticia) {
            console.log('[LOG] Usando a not√≠cia sugerida para o Cold Open.');
            coldOpenDialogo = await gerarDialogo({ tipo: 'cold_open', noticia: sugestoes.noticia, personagens, audiencia });
        } else if (sugestoes.efemeride && sugestoes.efemeride.texto) {
            console.log('[LOG] Nenhuma not√≠cia para Cold Open. Acionando fallback de Efem√©ride Regional...');
            coldOpenDialogo = await gerarDialogo({ tipo: 'fallback_cold_open', data_fallback: sugestoes.efemeride, personagens, audiencia });
        } else {
            coldOpenDialogo = "// Nenhuma op√ß√£o de Cold Open dispon√≠vel.";
        }
    }

    roteiroFinal = roteiroFinal.replace('{{COLD_OPEN_DIALOGO}}', coldOpenDialogo);
    
    const [saudacaoTaina, despedidaTaina] = await Promise.all([
        gerarDialogo({ tipo: 'saudacao_taina', audiencia, personagens }),
        gerarDialogo({ tipo: 'despedida_taina', audiencia, personagens })
    ]);
    roteiroFinal = roteiroFinal.replace('{{SAUDACAO_TAINA}}', saudacaoTaina);
    roteiroFinal = roteiroFinal.replace('{{DESPEDIDA_TAINA}}', despedidaTaina);
    roteiroFinal = roteiroFinal.replace('{{SAUDACAO_IRAI}}', `√â isso a√≠, Tai. Um bom dia pra esse povo trabalhador.`);
    roteiroFinal = roteiroFinal.replace('{{DESPEDIDA_IRAI}}', `√â isso, meu povo. Por hoje √© isso.`);

    const titulosPrincipais = pauta.noticiasPrincipais.map(n => n.titulo_principal);
    if(titulosPrincipais.length > 0) {
        const cardapioDialogo = await gerarDialogo({ tipo: 'cardapio', noticia: { titulos: titulosPrincipais } });
        roteiroFinal = roteiroFinal.replace('{{CARDAPIO_NOTICIAS}}', cardapioDialogo);
    } else {
        roteiroFinal = roteiroFinal.replace('{{CARDAPIO_NOTICIAS}}', 'Ira√≠: Eita, maninha, parece que hoje a rede veio vazia!');
    }

    let cenasDisponiveis = [...INSPIRACAO_INICIO_CENA];

    for (let i = 0; i < 4; i++) {
        const noticia = pauta.noticiasPrincipais[i];
        let dialogo = "// Sem not√≠cia para este bloco.";
        let titulo = "Intervalo";
        let trilha = "trilha_neutra.mp3";

        if (noticia) {
            // CORRE√á√ÉO APLICADA: Inclui o ID da classifica√ß√£o no t√≠tulo
            titulo = `[${noticia.classification.id}] ${noticia.titulo_principal}`;
            console.log(`\nBuscando texto completo para: "${noticia.titulo_principal}"`);
            const textosCompletos = await Promise.all(noticia.fontes.map(f => fetchFullText(f.link)));
            noticia.texto_completo = textosCompletos.filter(t => t).join('\n\n---\n\n');
            
            if (noticia.texto_completo) {
                if (cenasDisponiveis.length === 0) cenasDisponiveis = [...INSPIRACAO_INICIO_CENA];
                const cenaIndex = Math.floor(Math.random() * cenasDisponiveis.length);
                const direcao_cena = cenasDisponiveis.splice(cenaIndex, 1)[0];
                const tipoDialogo = noticia.isSuperNoticia ? 'super_noticia_principal' : 'noticia_principal';
                console.log(`  -> Gerando di√°logo (Tipo: ${tipoDialogo} | Inspira√ß√£o: ${direcao_cena.split(':')[0]})`);
                dialogo = await gerarDialogo({ tipo: tipoDialogo, noticia, personagens, audiencia, direcao_cena });
            } else {
                dialogo = "// N√£o foi poss√≠vel buscar o texto completo para esta not√≠cia.";
            }
            const classificationEmoji = noticia.classification.id.split(' ')[0];
            trilha = TRILHA_MAP[classificationEmoji] || "trilha_neutra.mp3";
        }
        roteiroFinal = roteiroFinal.replace(`{{NOTICIA_${i + 1}_TITULO}}`, titulo);
        roteiroFinal = roteiroFinal.replace(`{{NOTICIA_${i + 1}_DIALOGO}}`, dialogo);
        roteiroFinal = roteiroFinal.replace(`{{NOTICIA_${i + 1}_TRILHA}}`, trilha);

        if(i < 3) {
             await new Promise(resolve => setTimeout(resolve, 1000));
        }
    }
    
    const dataDeHoje = new Date().toISOString().split('T')[0];
    const outputFilename = path.join(OUTPUT_DIR, `roteiro-${dataDeHoje}.md`);
    await fs.mkdir(OUTPUT_DIR, { recursive: true });
    await fs.writeFile(outputFilename, roteiroFinal);

    console.log(`\n‚úÖ Roteiro finalizado com sucesso! Salvo em: ${outputFilename}`);
}
gerarRoteiro();
