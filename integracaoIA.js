const fs = require('fs');
const path = require('path');

class IntegracaoIA {
    constructor() {
        this.configPath = path.join(__dirname, 'config', 'ia-config.json');
        this.audiosPath = path.join(__dirname, 'audios');
        
        console.log(`üîß Inicializando IntegracaoIA...`);
        console.log(`üìÅ Config path: ${this.configPath}`);
        console.log(`üéµ Audios path: ${this.audiosPath}`);
        
        // Criar diret√≥rio de √°udios se n√£o existir
        if (!fs.existsSync(this.audiosPath)) {
            fs.mkdirSync(this.audiosPath, { recursive: true });
            console.log('üìÅ Diret√≥rio audios criado');
        }
        
        // Carregar configura√ß√µes com debug detalhado
        this.carregarConfiguracoes();
        
        // Importar node-fetch dinamicamente para compatibilidade
        this.fetch = null;
    }
    
    carregarConfiguracoes() {
        try {
            console.log(`üîß Verificando arquivo: ${this.configPath}`);
            
            if (!fs.existsSync(this.configPath)) {
                throw new Error(`‚ùå Arquivo n√£o encontrado: ${this.configPath}`);
            }
            
            const configData = fs.readFileSync(this.configPath, 'utf8');
            console.log(`‚úÖ Arquivo lido, ${configData.length} caracteres`);
            
            this.config = JSON.parse(configData);
            console.log(`‚úÖ JSON parseado, chaves: [${Object.keys(this.config).join(', ')}]`);
            
            if (!this.config.tts) {
                console.log('‚ùå Estrutura atual da config:');
                console.log(JSON.stringify(this.config, null, 2));
                throw new Error('Se√ß√£o TTS n√£o encontrada');
            }
            
            console.log(`‚úÖ TTS encontrado, servi√ßo: ${this.config.tts.servico_ativo}`);
            
        } catch (error) {
            console.error('‚ùå Erro ao carregar configura√ß√µes:', error.message);
            throw error;
        }
    }

    async inicializarFetch() {
        if (!this.fetch) {
            try {
                const { default: fetch } = await import('node-fetch');
                this.fetch = fetch;
                console.log('‚úÖ Node-fetch inicializado');
            } catch (error) {
                console.error('‚ùå Erro ao importar node-fetch:', error.message);
                throw new Error('node-fetch n√£o dispon√≠vel');
            }
        }
    }

    prepararTextoParaTTS(roteiro, personagem, contexto = {}) {
        const personagens = JSON.parse(fs.readFileSync(
            path.join(__dirname, 'data', 'personagens.json'), 'utf8'
        ));
        
        const podcastConfig = JSON.parse(fs.readFileSync(
            path.join(__dirname, 'data', 'podcast-config.json'), 'utf8'
        ));

        const dadosPersonagem = personagens.personagens.find(p => 
            p.nome.toLowerCase().includes(personagem.toLowerCase())
        );

        if (!dadosPersonagem) return roteiro;

        let textoPreparado = roteiro;
        
        // 1. DETECTAR CONTEXTO E DEFINIR TOM
        const tonalidade = this.detectarTonalidade(textoPreparado, contexto);
        
        // 2. APLICAR CONFIGURA√á√ïES DE TOM
        textoPreparado = this.aplicarConfiguracaoTom(textoPreparado, tonalidade, personagem);
        
        // 3. ADICIONAR PAUSAS AP√ìS G√çRIAS
        dadosPersonagem.g√≠rias?.forEach(giria => {
            const regex = new RegExp(`\\b${giria}\\b`, 'gi');
            textoPreparado = textoPreparado.replace(regex, `${giria}<break time="0.3s"/>`);
        });

        // 4. ADICIONAR √äNFASES BASEADAS NO TOM
        textoPreparado = this.adicionarEnfases(textoPreparado, tonalidade);
        
        // 5. AJUSTAR VELOCIDADE E PITCH POR PERSONALIDADE E TOM
        const configVoz = this.obterConfiguracaoVoz(personagem, tonalidade, dadosPersonagem);
        textoPreparado = `<prosody rate="${configVoz.velocidade}" pitch="${configVoz.pitch}">${textoPreparado}</prosody>`;

        return textoPreparado;
    }

    // NOVO: Gera√ß√£o de √°udio ElevenLabs
    async gerarAudioElevenLabs(texto, personagem, contexto = {}) {
        // Garantir que fetch est√° dispon√≠vel
        if (!this.fetch) {
            await this.inicializarFetch();
        }

        // Corrigir nome do personagem para buscar config correta
        let personagemKey = personagem.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
        if (personagemKey.includes('taina')) personagemKey = 'taina';
        else if (personagemKey.includes('irai')) personagemKey = 'irai';

        const config = this.config.tts.elevenlabs;
        // Usar os IDs do config
        const voiceId = personagemKey === 'taina' ? config.voice_taina : config.voice_irai;

        // Buscar configura√ß√£o contextual de voz (velocidade, emo√ß√£o, etc)
        let configVoz = {};
        if (contexto && contexto.configVoz && contexto.configVoz[personagemKey]) {
            configVoz = contexto.configVoz[personagemKey];
        } else if (this.config.configuracoes_personagens && this.config.configuracoes_personagens[personagemKey]) {
            configVoz = this.config.configuracoes_personagens[personagemKey];
        } else {
            throw new Error(`Configura√ß√£o de voz n√£o encontrada para o personagem: ${personagemKey}`);
        }

        // Par√¢metros ElevenLabs
        const payload = {
            text: texto,
            model_id: config.modelo,
            voice_settings: {
                stability: config.stability ?? 0.5,
                similarity_boost: config.similarity_boost ?? 0.8,
                style: config.style ?? 0.3,
                use_speaker_boost: config.use_speaker_boost ?? true
            }
        };

        // Ajustar style/intonation/contexto se vier do contexto
        if (configVoz.velocidade_fala) payload.voice_settings.style = configVoz.velocidade_fala;
        if (configVoz.emocao) payload.voice_settings.emotion = configVoz.emocao;
        if (configVoz.intensidade) payload.voice_settings.intensity = configVoz.intensidade;

        const url = `https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`;
        const headers = {
            'Accept': 'audio/mpeg',
            'Content-Type': 'application/json',
            'xi-api-key': config.api_key
        };

        console.log(`üéôÔ∏è Chamando ElevenLabs para ${personagem} (voice: ${voiceId})...`);
        try {
            const response = await this.fetch(url, {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`ElevenLabs API error: ${response.status} - ${errorText}`);
            }

            // Salvar √°udio
            const audioBuffer = await response.arrayBuffer();
            const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
            const nomeArquivo = `${personagemKey}_${timestamp}.mp3`;
            const caminhoArquivo = path.join(this.audiosPath, nomeArquivo);

            fs.writeFileSync(caminhoArquivo, Buffer.from(audioBuffer));

            return {
                arquivo: caminhoArquivo,
                personagem: personagem,
                texto: texto,
                duracao_estimada: Math.ceil(texto.length / 10), // estimativa simples
                servico: 'elevenlabs',
                voice_id: voiceId,
                tamanho_arquivo: Buffer.from(audioBuffer).length
            };

        } catch (error) {
            console.error(`‚ùå Erro na API ElevenLabs:`, error.message);
            throw error;
        }
    }

    async processarRoteiroCompleto(roteiroPath) {
        const roteiro = fs.readFileSync(roteiroPath, 'utf8');
        const audiosGerados = [];

        const falasTaina = this.extrairFalas(roteiro, 'Tain√°');
        const falasIray = this.extrairFalas(roteiro, 'Iray');

        console.log(`üéØ Encontradas ${falasTaina.length} falas da Tain√°`);
        console.log(`üéØ Encontradas ${falasIray.length} falas do Iray`);

        // Gera √°udios para Tain√°
        for (let i = 0; i < falasTaina.length; i++) {
            const contexto = this.identificarContextoFala(falasTaina[i], i, 'Tain√°');
            const textoPreparado = this.prepararTextoParaTTS(falasTaina[i], 'Tain√°', contexto);
            const audio = await this.gerarAudio(textoPreparado, 'Tain√°');
            audiosGerados.push({
                personagem: 'Tain√°',
                ordem: i,
                texto: falasTaina[i],
                contexto: contexto,
                tonalidade: contexto.tonalidade,
                arquivo: audio.arquivo,
                timestamp: new Date().toISOString()
            });
        }

        // Gera √°udios para Iray
        for (let i = 0; i < falasIray.length; i++) {
            const contexto = this.identificarContextoFala(falasIray[i], i, 'Iray');
            const textoPreparado = this.prepararTextoParaTTS(falasIray[i], 'Iray', contexto);
            const audio = await this.gerarAudio(textoPreparado, 'Iray');
            audiosGerados.push({
                personagem: 'Iray',
                ordem: i,
                texto: falasIray[i],
                contexto: contexto,
                tonalidade: contexto.tonalidade,
                arquivo: audio.arquivo,
                timestamp: new Date().toISOString()
            });
        }

        const infoAudios = {
            roteiro_origem: roteiroPath,
            data_processamento: new Date().toISOString(),
            total_audios: audiosGerados.length,
            audios: audiosGerados
        };

        const infoFile = path.join(this.audioPath, `info_${Date.now()}.json`);
        fs.writeFileSync(infoFile, JSON.stringify(infoAudios, null, 2));

        console.log(`‚úÖ ${audiosGerados.length} √°udios processados!`);
        console.log(`üìÑ Informa√ß√µes salvas em: ${infoFile}`);

        return infoAudios;
    }

    extrairFalas(roteiro, personagem) {
        const regex = new RegExp(`\\*\\*${personagem}:\\*\\*\\s*([^*]+)`, 'g');
        const falas = [];
        let match;

        while ((match = regex.exec(roteiro)) !== null) {
            falas.push(match[1].trim());
        }

        return falas;
    }

    // NOVO: M√©todo principal para gerar √°udio (multi-servi√ßo)
    async gerarAudio(texto, personagem, contexto = {}) {
        const config = this.config.tts;
        // For√ßar uso do ElevenLabs
        const servicoAtivo = 'elevenlabs';

        console.log(`üéôÔ∏è Gerando √°udio para ${personagem} usando ElevenLabs...`);

        // Preparar texto com TTS emocional/contextual
        const textoPreparado = this.prepararTextoParaTTS(texto, personagem, contexto);

        try {
            let resultado;
            resultado = await this.gerarAudioElevenLabs(textoPreparado, personagem, contexto);

            console.log(`‚úÖ √Åudio gerado: ${resultado.arquivo}`);
            return resultado;

        } catch (error) {
            console.error(`‚ùå Erro ao gerar √°udio para ${personagem}:`, error.message);
            throw error;
        }
    }

    // NOVO: Detecta tonalidade baseada no conte√∫do
    detectarTonalidade(texto, contexto) {
        const textoLower = texto.toLowerCase();
        
        // ABERTURA - SEMPRE ALEGRE
        if (contexto.secao === 'abertura' || textoLower.includes('come√ßando mais um bubuia news')) {
            return {
                tipo: 'alegre',
                intensidade: 'alta',
                humor: true,
                energia: 'alta'
            };
        }
        
        // NOT√çCIAS S√âRIAS
        const palavrasSerias = [
            'acidente', 'morte', 'morreu', 'faleceu', 'trag√©dia', 'crime', 'assassinato',
            'roubo', 'assalto', 'viol√™ncia', 'agress√£o', 'pris√£o', 'preso',
            'problema', 'crise', 'desemprego', 'infla√ß√£o', 'alta dos pre√ßos',
            'enchente', 'desastre', 'emerg√™ncia', 'hospital', 'doen√ßa'
        ];
        
        const temPalavraSeria = palavrasSerias.some(palavra => textoLower.includes(palavra));
        
        if (temPalavraSeria) {
            return {
                tipo: 'serio',
                intensidade: 'media',
                humor: false,
                energia: 'baixa'
            };
        }
        
        // NOT√çCIAS POSITIVAS/LEVES
        const palavrasPositivas = [
            'festa', 'festival', 'show', 'celebra√ß√£o', 'inaugura√ß√£o',
            'sucesso', 'vit√≥ria', 'ganhou', 'pr√™mio', 'reconhecimento',
            'melhoria', 'crescimento', 'desenvolvimento', 'progresso',
            'cultura', 'arte', 'm√∫sica', 'divers√£o', 'entretenimento',
            'esporte', 'campeonato', 'conquista'
        ];
        
        const temPalavraPositiva = palavrasPositivas.some(palavra => textoLower.includes(palavra));
        
        if (temPalavraPositiva) {
            return {
                tipo: 'animado',
                intensidade: 'alta',
                humor: true,
                energia: 'alta'
            };
        }
        
        // INTERA√á√ÉO ENTRE PERSONAGENS - BRINCALHONA E SARC√ÅSTICA
        if (contexto.secao === 'interacao' || textoLower.includes('n√©') || textoLower.includes('concordo')) {
            return {
                tipo: 'brincalhao',
                intensidade: 'media',
                humor: true,
                energia: 'media',
                sarcasmo: true
            };
        }
        
        // PARINTINS/CULTURA REGIONAL - SUPER ANIMADO
        if (textoLower.includes('parintins') || textoLower.includes('boi') || 
            textoLower.includes('garantido') || textoLower.includes('caprichoso')) {
            return {
                tipo: 'empolgado',
                intensidade: 'maxima',
                humor: true,
                energia: 'maxima'
            };
        }
        
        // PADR√ÉO - CONVERSACIONAL
        return {
            tipo: 'conversacional',
            intensidade: 'media',
            humor: false,
            energia: 'media'
        };
    }

    // NOVO: Aplica configura√ß√µes espec√≠ficas de tom
    aplicarConfiguracaoTom(texto, tonalidade, personagem) {
        let textoComTom = texto;
        
        switch (tonalidade.tipo) {
            case 'alegre':
                // Adiciona entusiasmo na voz
                textoComTom = `<amazon:emotion name="excited" intensity="${tonalidade.intensidade}">${texto}</amazon:emotion>`;
                break;
                
            case 'serio':
                // Tom mais s√≥brio e respeitoso
                textoComTom = `<amazon:emotion name="conversational" intensity="medium">${texto}</amazon:emotion>`;
                break;
                
            case 'animado':
                // Tom positivo e energ√©tico
                textoComTom = `<amazon:emotion name="excited" intensity="${tonalidade.intensidade}">${texto}</amazon:emotion>`;
                break;
                
            case 'brincalhao':
                // Tom descontra√≠do e levemente sarc√°stico para intera√ß√µes
                textoComTom = `<amazon:emotion name="conversational" intensity="medium"><prosody rate="1.0" pitch="medium">${texto}</prosody></amazon:emotion>`;
                break;
                
            case 'empolgado':
                // M√°xima empolga√ß√£o para cultura regional
                textoComTom = `<amazon:emotion name="excited" intensity="high"><emphasis level="strong">${texto}</emphasis></amazon:emotion>`;
                break;
                
            default:
                // Tom conversacional natural
                textoComTom = `<amazon:emotion name="conversational" intensity="medium">${texto}</amazon:emotion>`;
        }
        
        return textoComTom;
    }

    // NOVO: Adiciona √™nfases baseadas no tom
    adicionarEnfases(texto, tonalidade) {
        let textoComEnfase = texto;
        
        // Enfatizar palavras importantes baseado na tonalidade
        if (tonalidade.humor) {
            // Adiciona √™nfase em g√≠rias para humor
            const giriasParaEnfase = ['oxe', 'vichi', 'cabra danada', 'meu pai eterno'];
            giriasParaEnfase.forEach(giria => {
                const regex = new RegExp(`\\b${giria}\\b`, 'gi');
                textoComEnfase = textoComEnfase.replace(regex, `<emphasis level="moderate">${giria}</emphasis>`);
            });
        }
        
        if (tonalidade.tipo === 'serio') {
            // Enfatiza palavras-chave em not√≠cias s√©rias
            textoComEnfase = textoComEnfase.replace(/\*\*(.*?)\*\*/g, '<emphasis level="strong">$1</emphasis>');
        }
        
        return textoComEnfase;
    }

    // NOVO: Configura√ß√£o de voz por personalidade e tom
    obterConfiguracaoVoz(personagem, tonalidade, dadosPersonagem) {
        const baseConfig = {
            velocidade: '1.0',
            pitch: 'medium'
        };
        
        // Ajustes por personalidade
        const isAnimado = dadosPersonagem.personalidade?.includes('animado');
        
        // Ajustes por tonalidade
        switch (tonalidade.energia) {
            case 'maxima':
                baseConfig.velocidade = isAnimado ? '1.2' : '1.1';
                baseConfig.pitch = 'high';
                break;
            case 'alta':
                baseConfig.velocidade = isAnimado ? '1.1' : '1.05';
                baseConfig.pitch = 'medium';
                break;
            case 'baixa':
                baseConfig.velocidade = '0.9';
                baseConfig.pitch = 'low';
                break;
            default:
                baseConfig.velocidade = isAnimado ? '1.05' : '1.0';
                baseConfig.pitch = 'medium';
        }
        
        return baseConfig;
    }

    // NOVO: Identifica contexto da fala para aplicar tom correto
    identificarContextoFala(texto, ordem, personagem) {
        const textoLower = texto.toLowerCase();
        
        // Identificar se√ß√£o do podcast
        let secao = 'geral';
        if (textoLower.includes('come√ßando mais um bubuia news') || ordem === 0) {
            secao = 'abertura';
        } else if (textoLower.includes('tchau') || textoLower.includes('at√© a pr√≥xima')) {
            secao = 'encerramento';
        } else if (textoLower.includes('esporte') || textoLower.includes('campeonato')) {
            secao = 'esportes';
        } else if (textoLower.includes('evento') || textoLower.includes('festival')) {
            secao = 'eventos';
        } else if (textoLower.includes('coment√°rio') || textoLower.includes('ouvinte')) {
            secao = 'interacao';
        } else if (this.ehInteracaoEntrePersonagens(texto)) {
            secao = 'interacao';
        }
        
        return {
            secao,
            ordem,
            personagem,
            necessita_piada: this.precisaPiada(texto, secao),
            tonalidade: secao // Ser√° refinado no detectarTonalidade
        };
    }

    // NOVO: Determina se contexto permite/precisa de piada regional
    precisaPiada(texto, secao) {
        const textoLower = texto.toLowerCase();
        
        // Se√ß√µes que permitem humor
        const secoesComHumor = ['abertura', 'esportes', 'eventos', 'interacao'];
        if (!secoesComHumor.includes(secao)) return false;
        
        // Assuntos que permitem piada regional
        const assuntosComHumor = [
            'parintins', 'boi', 'garantido', 'caprichoso', 'festival',
            'chuva', 'calor', 'tr√¢nsito', 'feira', 'comida t√≠pica',
            'a√ßa√≠', 'tucum√£', 'tambaqui', 'pirarucu'
        ];
        
        return assuntosComHumor.some(assunto => textoLower.includes(assunto));
    }

    // NOVO: Gera piadas regionais contextuais espec√≠ficas de Manaus
    gerarPiadaRegional(texto, personagem) {
        const textoLower = texto.toLowerCase();
        const piadasManaus = {
            chuva: [
                "Vichi maninho, essa chuva t√° que nem tucum√£ maduro - caindo direto!",
                "Oxe, com essa chuva a√≠, at√© os peixes t√£o com medo de sair de casa!",
                "Rapaz, choveu tanto que at√© o Meeting das √Åguas ficou confuso!",
                "Meu pai eterno, chuva dessa nem no tempo de No√©!"
            ],
            calor: [
                "Cabra danada, t√° mais quente que fogueira de S√£o Jo√£o!",
                "Meu pai eterno, t√° um calor que nem o garantido vermelho!",
                "Vichi, t√° t√£o quente que o asfalto da Torquato t√° derretendo!",
                "Oxe, esse sol t√° mais forte que motor de rabeta no rio!"
            ],
            transito: [
                "Esse tr√¢nsito t√° mais lento que boto subindo corredeira!",
                "Vichi, t√° mais parado que jacar√© tomando sol na beirada!",
                "Rapaz, esse congestionamento na Constantino Nery t√° pior que enchente!",
                "Meu pai eterno, √¥nibus mais lotado que canoa na √©poca da piracema!"
            ],
            onibus: [
                "Oxe, √¥nibus mais apertado que sardinha na lata!",
                "Vichi, t√° mais cheio que barco na festa do √áair√©!",
                "Rapaz, dentro desse √¥nibus nem formiga cabe mais!",
                "Cabra danada, parece elevador do Amazonas Shopping na Black Friday!"
            ],
            buracos: [
                "Meu pai eterno, buraco na rua maior que igarap√©!",
                "Vichi, esses buracos na Djalma Batista parecem cratera da lua!",
                "Oxe, buraco t√£o grande que d√° pra pescar tambaqui dentro!",
                "Rapaz, essa rua t√° mais furada que peneira de a√ßa√≠!"
            ],
            alagamento: [
                "Cabra danada, alagou tanto que parece √©poca da cheia no interior!",
                "Vichi, √°gua na rua subindo mais que rio em √©poca de inverno!",
                "Oxe, t√° parecendo Veneza, s√≥ que com jacar√© no lugar de gondoleiro!",
                "Rapaz, at√© os carros viraram barco nessa enchente urbana!"
            ],
            seguranca_compensa: [
                "Vichi, na Compensa at√© os bandidos andam com medo! (risos)",
                "Oxe, l√° √© mais perigoso que nadar com piranha!",
                "Rapaz, na Compensa at√© o GPS pede pra voltar!",
                "Meu pai eterno, l√° √© terra de ningu√©m mesmo!"
            ],
            seguranca_zona_leste: [
                "Cabra danada, Zona Leste √© aventura que n√£o recomendo!",
                "Vichi, l√° √© mais arriscado que pescar jacar√© de m√£o!",
                "Oxe, na Zona Leste at√© os criminosos fazem seguro de vida!",
                "Rapaz, l√° o perigo anda solto que nem capivara no pasto!"
            ],
            ponta_negra: [
                "Meu pai eterno, na Ponta Negra tem mais coisa boiando que tronco no rio!",
                "Vichi, praia da Ponta Negra virou dep√≥sito flutuante!",
                "Oxe, l√° boia tanta coisa que parece feira livre aqu√°tica!",
                "Rapaz, na Ponta Negra at√© o lixo sabe nadar!"
            ],
            parintins: [
                "A√≠ sim, maninho! Parintins √© onde o cora√ß√£o bate mais forte!",
                "Curum√≠m, em Parintins at√© os peixes sabem dan√ßar!",
                "Vichi, Festival de Parintins √© melhor que Copa do Mundo!",
                "Oxe, em Parintins at√© a lua para pra assistir o boi!"
            ],
            interior: [
                "Presidente Figueiredo, terra das cachoeiras e da paz, maninho!",
                "Rio Preto da Eva, onde o a√ßa√≠ √© mais doce e a vida mais calma!",
                "No interior √© diferente, caboco - l√° ainda tem sossego!",
                "Vichi, cidade pequena onde todo mundo se conhece desde crian√ßa!"
            ],
            amazonia: [
                "Meu pai eterno, aqui na Amaz√¥nia a natureza √© que manda!",
                "Vichi, floresta t√£o grande que nem Deus conhece tudo!",
                "Oxe, aqui tem bicho que a ci√™ncia ainda n√£o descobriu!",
                "Rapaz, Amaz√¥nia √© o pulm√£o do mundo mesmo!"
            ]
        };
        
        // Busca piadas por categoria
        for (const [categoria, piadas] of Object.entries(piadasManaus)) {
            if (this.temPalavraChaveCategoria(textoLower, categoria)) {
                const piadaEscolhida = piadas[Math.floor(Math.random() * piadas.length)];
                return this.ajustarPiadaPorPersonagem(piadaEscolhida, personagem);
            }
        }
        
        return null;
    }

    // NOVO: Verifica palavras-chave por categoria
    temPalavraChaveCategoria(textoLower, categoria) {
        const palavrasChave = {
            chuva: ['chuva', 'chove', 'chovendo', 'aguaceiro', 'temporal', 'garoa'],
            calor: ['calor', 'quente', 'sol', 'temperatura', 'abafado', 'sufoco'],
            transito: ['tr√¢nsito', 'congestionamento', 'engarrafamento', 'tr√¢nsito parado', 'constantino nery', 'torquato'],
            onibus: ['√¥nibus', 'coletivo', 'transporte p√∫blico', 'lotado', 'cheio'],
            buracos: ['buraco', 'cratera', 'rua', 'asfalto', 'djalma batista', 'esburacado'],
            alagamento: ['alagamento', 'alagou', 'enchente', '√°gua na rua', 'inunda√ß√£o'],
            seguranca_compensa: ['compensa', 'viol√™ncia', 'assalto', 'crime', 'seguran√ßa'],
            seguranca_zona_leste: ['zona leste', 'perigoso', 'violento', 'criminalidade'],
            ponta_negra: ['ponta negra', 'praia', 'boiando', 'lixo', 'rio negro'],
            parintins: ['parintins', 'boi', 'garantido', 'caprichoso', 'festival'],
            interior: ['presidente figueiredo', 'rio preto da eva', 'interior', 'cachoeira'],
            amazonia: ['amaz√¥nia', 'floresta', 'natureza', 'biodiversidade', 'pulm√£o do mundo']
        };
        
        const palavras = palavrasChave[categoria] || [];
        return palavras.some(palavra => textoLower.includes(palavra));
    }

    // NOVO: Ajusta piada conforme personalidade do personagem
    ajustarPiadaPorPersonagem(piada, personagem) {
        if (personagem.toLowerCase().includes('taina')) {
            // Tain√° √© mais animada e usa mais "oxe"
            return piada.replace(/Vichi/g, 'Oxe').replace(/Rapaz/g, 'Cabra danada');
        } else {
            // Iray √© mais reflexivo e usa mais "vichi"
            return piada.replace(/Oxe/g, 'Vichi').replace(/Cabra danada/g, 'Rapaz');
        }
    }

    // NOVO: Gera intera√ß√£o sarc√°stica entre personagens
    gerarInteracaoSarcastica(contexto, personagem) {
        const interacoesSarcasticas = {
            concordancia: [
                "Ah t√°, n√©? Como se fosse f√°cil assim...",
                "Claro, porque sempre funciona desse jeito em Manaus, n√©?",
                "Uhum, fala isso pra quem pega √¥nibus todo dia!",
                "√â bem assim mesmo... quando n√£o √© o contr√°rio!"
            ],
            discordancia: [
                "Eita, a√≠ voc√™ for√ßou a amizade, n√© maninho?",
                "Oxe, ser√° que a gente t√° falando da mesma Manaus?",
                "Vichi, voc√™ deve morar em outra cidade!",
                "Rapaz, conta outra que essa eu n√£o acredito!"
            ],
            ironia: [
                "Ah sim, porque tudo sempre d√° certo aqui, n√©?",
                "Claro, igual aquele buraco da Djalma Batista que 'v√£o arrumar'!",
                "Uhum, tipo quando dizem que o √¥nibus vai chegar no hor√°rio!",
                "√â, igual a promessa de asfaltar a cidade toda!"
            ]
        };
        
        const categoria = Math.random() > 0.6 ? 'concordancia' : 
                         Math.random() > 0.3 ? 'discordancia' : 'ironia';
        
        const frases = interacoesSarcasticas[categoria];
        return frases[Math.floor(Math.random() * frases.length)];
    }

    // NOVO: Detecta se √© intera√ß√£o entre personagens
    ehInteracaoEntrePersonagens(texto) {
        const indicadoresInteracao = [
            'n√©', 'concordo', 'discordo', 'tamb√©m acho', '√© isso mesmo',
            'n√£o sei n√£o', 'ser√°?', 'pode ser', 'ih rapaz', 'eita',
            '√© bem assim', 'pois √©', 'exatamente', 'com certeza',
            'ah t√°', 'claro', 'obvio', 'l√≥gico'
        ];
        
        const textoLower = texto.toLowerCase();
        return indicadoresInteracao.some(indicador => textoLower.includes(indicador));
    }
}

module.exports = IntegracaoIA;