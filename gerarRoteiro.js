const fs = require('fs');
const path = require('path');
const GerenciadorEventos = require('./gerenciadorEventos');
const IntegracaoIA = require('./integracaoIA');
const DialogosEspontaneos = require('./dialogosEspontaneos');
const SistemaRevisao = require('./sistemaRevisao');

class GeradorRoteiro {
    constructor() {
        this.dataPath = path.join(__dirname, 'data');
        this.templatesPath = path.join(__dirname, 'templates');
        
        // Inicializar gerenciadores
        this.gerenciadorEventos = new GerenciadorEventos();
        this.integracaoIA = new IntegracaoIA();
        this.dialogosEspontaneos = new DialogosEspontaneos();
        this.sistemaRevisao = new SistemaRevisao();
        
        // Carregar dados
        this.personagens = this.carregarJSON('personagens.json');
        this.girias = this.carregarJSON('girias.json');
        this.podcastConfig = this.carregarJSON('podcast-config.json');
        this.eventos = this.gerenciadorEventos.eventos;
        
        // Carregar template
        this.template = fs.readFileSync(
            path.join(this.templatesPath, 'roteiro-template-melhorado.md'), 
            'utf8'
        );
    }

    carregarJSON(nomeArquivo) {
        try {
            const conteudo = fs.readFileSync(
                path.join(this.dataPath, nomeArquivo), 
                'utf8'
            );
            return JSON.parse(conteudo);
        } catch (error) {
            console.error(`Erro ao carregar ${nomeArquivo}:`, error.message);
            return {};
        }
    }

    obterDataFormatada() {
        const hoje = new Date();
        return hoje.toLocaleDateString('pt-BR', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    }

    obterGiriaAleatoria(personagem) {
        const girias = this.girias[personagem.toLowerCase()]?.g√≠rias || [];
        if (girias.length === 0) {
            // Remover fallback para frases do config
            throw new Error(`Sem g√≠rias cadastradas para o personagem: ${personagem}`);
        }
        return girias[Math.floor(Math.random() * girias.length)];
    }

    obterComentarioOuvinte() {
        const comentarios = this.eventos.comentarios_ouvintes;
        if (!comentarios || comentarios.length === 0) {
            throw new Error('Nenhum coment√°rio de ouvinte dispon√≠vel nos dados.');
        }
        const comentario = comentarios[Math.floor(Math.random() * comentarios.length)];
        return `"${comentario.comentario}" - ${comentario.nome}, ${comentario.cidade}`;
    }

    gerarDialogoNatural() {
        const taina = this.personagens.personagens?.find(p => p.nome.includes('Tain√°'));
        const iray = this.personagens.personagens?.find(p => p.nome.includes('Ira√≠'));

        if (!taina || !iray) {
            return "Di√°logo n√£o dispon√≠vel - dados dos personagens n√£o encontrados";
        }

        const dialogos = [
            `**Tain√°:** ${this.obterGiriaAleatoria('tain√°')}, ${iray.apelidos[0]}, voc√™ viu essa not√≠cia?\n**Ira√≠:** ${this.obterGiriaAleatoria('iray')}, vi sim, ${taina.apelidos[0]}. Que coisa, n√©?`,
            `**Ira√≠:** E a√≠, ${taina.apelidos[1]}, o que voc√™ achou?\n**Tain√°:** ${this.obterGiriaAleatoria('tain√°')}, achei interessante demais!`,
            `**Tain√°:** ${this.obterGiriaAleatoria('tain√°')}, ${iray.apelidos[1]}, conta a√≠ sua opini√£o!\n**Ira√≠:** Ah, ${taina.apelidos[0]}, ${this.obterGiriaAleatoria('iray')}, √© bem assim mesmo.`,
        ];

        return dialogos[Math.floor(Math.random() * dialogos.length)];
    }

    // NOVO: Obter abertura aleat√≥ria do podcast
    obterAberturaAleatoria() {
        const aberturas = this.podcastConfig?.podcast_info?.aberturas_padrao || [
            "Fala maninho, t√° come√ßando mais um BubuiA News!",
            "Fala curum√≠m, t√° come√ßando mais um BubuiA News!"
        ];
        return aberturas[Math.floor(Math.random() * aberturas.length)];
    }

    gerarRoteiro() {
        console.log('üìù Gerando roteiro do BubuiA News...');

        try {
            // 1. INTRODU√á√ÉO OFICIAL
            const introducaoCompleta = this.dialogosEspontaneos.gerarIntroducaoCompleta();
            
            // 2. INTERA√á√ÉO ESPONT√ÇNEA
            const interacaoEspontanea = this.dialogosEspontaneos.gerarInteracaoEspontanea();
            
            // 3. TRANSI√á√ÉO PARA CARD√ÅPIO
            const transicaoCardapio = this.dialogosEspontaneos.gerarTransicaoCardapio();

            // 4. GERAR CONTE√öDO (IMPLEMENTAR TODAS AS VARI√ÅVEIS)
            const eventosProximos = this.gerenciadorEventos.obterEventosProximos();
            const eventoDestaque = this.obterEventoDestaque();
            const comentarioOuvinte = this.obterComentarioOuvinte();

            // Criar placeholders COMPLETOS
            const placeholders = {
                // Estrutura do programa
                '{{INTRODUCAO_COMPLETA}}': introducaoCompleta,
                '{{INTERACAO_ESPONTANEA}}': interacaoEspontanea.texto,
                '{{TRANSICAO_CARDAPIO}}': transicaoCardapio,
                
                // Personagens - CORRIGINDO VALOR_TEMPORARIO
                '{{APRESENTADOR}}': 'Tain√° e Ira√≠',
                '{{APRESENTADOR_PRINCIPAL}}': this.obterApresentadorPrincipal(),
                '{{APRESENTADOR_SECUNDARIO}}': 'E eu sou o Ira√≠!',
                
                // Conte√∫do principal - 3 MANCHETES + CLIMA CONDICIONAL
                '{{MANCHETE_PRINCIPAL}}': this.gerarManchetePrincipal(),
                '{{MANCHETE_SECUNDARIA}}': this.gerarMancheteSecundaria(),
                '{{MANCHETE_TERCIARIA}}': this.gerarMancheteTerciaria(),
                '{{NOTICIA_1}}': this.gerarNoticia1(),
                '{{NOTICIA_2}}': this.gerarNoticia2(),
                '{{NOTICIA_3}}': this.gerarNoticia3(),
                '{{NOTICIA_ESPORTE}}': this.gerarNoticiaEsporte(),
                '{{CLIMA_RELEVANTE}}': this.gerarClimaRelevante() || '', // Garantir que n√£o fica undefined
                '{{EVENTO_DESTAQUE}}': eventoDestaque.titulo || this.gerarEventoDestaque(),
                '{{DESCRICAO_EVENTO}}': eventoDestaque.descricao || "Evento com v√°rias atra√ß√µes regionais",
                '{{CURIOSIDADE_REGIONAL}}': this.gerarCuriosidadeRegional(),
                
                // Coment√°rios e intera√ß√µes
                '{{COMENTARIO_BOI_TAINA}}': this.gerarComentarioBoiTaina(),
                '{{COMENTARIO_BOI_IRAY}}': this.gerarComentarioBoiIrai(),
                '{{COMENTARIO_IRAY_MANCHETE}}': this.gerarComentarioIraiManchete(),
                '{{COMENTARIO_TAINA}}': this.gerarComentarioTaina(),
                '{{COMENTARIO_OUVINTE}}': comentarioOuvinte,
                '{{COMENTARIO_RIVALIDADE}}': this.gerarComentarioRivalidade(),
                '{{RESPOSTA_TAINA}}': this.gerarRespostaTaina(),
                '{{RESPOSTA_IRAY}}': this.gerarRespostaIrai(),
                '{{DIALOGO_CULTURA}}': this.gerarDialogoCultura(),
                
                // Encerramentos - CORRIGINDO ENCERRAMENTO_IRAI
                '{{DESPEDIDA_CONJUNTA}}': this.gerarDespedidaConjunta(),
                '{{ENCERRAMENTO_TAINA}}': this.gerarEncerramentoTaina(),
                '{{ENCERRAMENTO_IRAI}}': this.gerarEncerramentoIrai(),
                
                // Caracter√≠sticas dos personagens
                '{{GIRIA_TAINA}}': this.gerarGiriaTaina(),
                '{{GIRIA_IRAI}}': this.gerarGiriaIrai(),
                '{{LISTA_GIRIAS_TAINA}}': this.obterListaGiriasTaina(),
                '{{LISTA_GIRIAS_IRAY}}': this.obterListaGiriasIrai(),
                
                // Metadados
                '{{DATA}}': this.obterDataFormatada(),
                '{{DURACAO}}': this.obterDuracao(),
                '{{TIMESTAMP}}': this.obterTimestamp(),
                '{{TEMAS_PRINCIPAIS}}': this.obterTemasPrincipais(),
                '{{TIME_FOCO}}': this.obterTimeFoco(),
                '{{EFEITOS_SONOROS}}': this.obterEfeitosSonoros(),
                '{{OBSERVACOES_TECNICAS}}': this.obterObservacoesTecnicas(),
                '{{TIPO_INTERACAO}}': interacaoEspontanea.tipo,
                '{{CONFIGURACAO_TTS}}': JSON.stringify(
                    this.dialogosEspontaneos.obterConfiguracaoTTS(interacaoEspontanea.tipo)
                )
            };

            // Aplicar placeholders no template
            let roteiro = this.template;
            Object.keys(placeholders).forEach(placeholder => {
                const valor = placeholders[placeholder];
                if (valor === undefined || valor === null) {
                    throw new Error(`Placeholder n√£o resolvido: ${placeholder}`);
                }
                roteiro = roteiro.replace(
                    new RegExp(placeholder.replace(/[{}]/g, '\\$&'), 'g'), 
                    valor
                );
            });

            // LIMPEZA FINAL: Corrigir problemas conhecidos
            roteiro = roteiro.replace(/VALOR_TEMPORARIO/g, 'E eu sou o Ira√≠!');
            roteiro = roteiro.replace(/\bIray\b/g, 'Ira√≠'); // Corrigir nome
            roteiro = roteiro.replace(/Oxe,/g, 'Eita,'); // Reduzir "oxe" excessivo
            
            // Corrigir formata√ß√£o de di√°logos
            roteiro = roteiro.replace(/\\n/g, '\n');
            
            // Remover se√ß√µes duplicadas
            roteiro = roteiro.replace(/## üí¨ INTERA√á√ÉO ESPONT√ÇNEA \([^)]+\)\s*\n\s*## üí¨ INTERA√á√ÉO ESPONT√ÇNEA \([^)]+\)/g, '## üí¨ INTERA√á√ÉO ESPONT√ÇNEA');
            roteiro = roteiro.replace(/## üîÑ TRANSI√á√ÉO PARA CARD√ÅPIO\s*\n\s*## üîÑ TRANSI√á√ÉO PARA CARD√ÅPIO/g, '## üîÑ TRANSI√á√ÉO PARA CARD√ÅPIO');
            
            // Remover vari√°veis n√£o resolvidas
            roteiro = roteiro.replace(/VALOR_NAO_DEFINIDO_\{\{[^}]+\}\}/g, '');
            roteiro = roteiro.replace(/\{\{[^}]+\}\}/g, ''); // Remover placeholders restantes
            
            // Remover se√ß√µes vazias de clima
            roteiro = roteiro.replace(/## üå¶Ô∏è BLOCO \d+ - CLIMA \(SE RELEVANTE\)\s*\n\s*\n---/g, '');
            
            // Corrigir emojis quebrados
            roteiro = roteiro.replace(/ÔøΩ /g, 'üèÜ ');

            // VERIFICA√á√ÉO FINAL: Procurar por undefined restante
            const undefinedCount = (roteiro.match(/undefined/gi) || []).length;
            if (undefinedCount > 0) {
                console.log(`‚ö†Ô∏è Encontrados ${undefinedCount} 'undefined' no roteiro - corrigindo...`);
                roteiro = roteiro.replace(/undefined/gi, '');
            }

            console.log('‚úÖ Roteiro gerado com sucesso!');
            console.log(`üìä Tipo de intera√ß√£o: ${interacaoEspontanea.tipo}`);
            console.log(`üîç Vari√°veis undefined encontradas: ${undefinedCount}`);
            
            return roteiro;

        } catch (error) {
            console.error('‚ùå Erro ao gerar roteiro:', error.message);
            throw error;
        }
    }

    salvarRoteiro(roteiro) {
        const dataArquivo = new Date().toISOString().split('T')[0];
        const nomeArquivo = `roteiro-${dataArquivo}.md`;
        const caminhoArquivo = path.join(__dirname, nomeArquivo);

        fs.writeFileSync(caminhoArquivo, roteiro, 'utf8');
        console.log(`‚úÖ Roteiro salvo em: ${nomeArquivo}`);
        return nomeArquivo;
    }

    // NOVO: Processar not√≠cias e detectar eventos
    async processarNoticiasDodia(noticias) {
        console.log('üì∞ Processando not√≠cias para detectar eventos...');
        
        const eventosDetectados = this.gerenciadorEventos.processarNoticias(noticias);
        
        if (eventosDetectados > 0) {
            console.log(`üéØ ${eventosDetectados} novos eventos detectados e adicionados!`);
            // Recarrega eventos atualizados
            this.eventos = this.gerenciadorEventos.eventos;
        }

        return eventosDetectados;
    }

    // NOVO: Gerar roteiro com eventos din√¢micos
    gerarRoteiroComEventos() {
        // Limpa eventos antigos
        this.gerenciadorEventos.limparEventosAntigos();
        
        // Pega eventos pr√≥ximos
        const eventosProximos = this.gerenciadorEventos.obterEventosProximos();
        
        let roteiro = this.gerarRoteiro(); // M√©todo original
        
        // Adiciona se√ß√£o de eventos se houver
        if (eventosProximos.length > 0) {
            let secaoEventos = '\n\n## üìÖ AGENDA DE EVENTOS\n\n';
            
            eventosProximos.forEach(evento => {
                const dataFormatada = new Date(evento.data).toLocaleDateString('pt-BR');
                secaoEventos += `**${evento.titulo}**\n`;
                secaoEventos += `üìÖ ${dataFormatada} | üìç ${evento.categoria}\n`;
                secaoEventos += `${evento.descricao}\n\n`;
            });
            
            // Insere antes do encerramento
            roteiro = roteiro.replace('## ENCERRAMENTO', secaoEventos + '## üéµ ENCERRAMENTO');
        }

        return roteiro;
    }

    // NOVO: Execu√ß√£o completa com IA
    async executarCompleto(opcoes = {}) {
        console.log('üéôÔ∏è Iniciando gera√ß√£o completa do podcast...');
        
        try {
            // 1. Processar not√≠cias se fornecidas
            if (opcoes.noticias) {
                await this.processarNoticiasDodia(opcoes.noticias);
            }

            // 2. Gerar roteiro
            const roteiro = this.gerarRoteiroComEventos();
            const nomeArquivo = this.salvarRoteiro(roteiro);

            // 3. Gerar √°udios se solicitado
            if (opcoes.gerarAudio) {
                console.log('üéµ Gerando √°udios...');
                const caminhoRoteiro = path.join(__dirname, nomeArquivo);
                const infoAudios = await this.integracaoIA.processarRoteiroCompleto(caminhoRoteiro);
                
                console.log(`üéß ${infoAudios.total_audios} √°udios gerados!`);
                
                return {
                    roteiro: nomeArquivo,
                    audios: infoAudios,
                    eventos_detectados: opcoes.noticias ? 'processados' : 'n√£o fornecidas'
                };
            }

            return {
                roteiro: nomeArquivo,
                eventos_proximos: this.gerenciadorEventos.obterEventosProximos().length
            };

        } catch (error) {
            console.error('‚ùå Erro na execu√ß√£o completa:', error.message);
            throw error;
        }
    }

    // NOVO: M√©todo principal com sistema de revis√£o integrado
    async gerarEpisodioCompleto(opcoes = {}) {
        console.log('üéôÔ∏è === BUBUIA NEWS - GERA√á√ÉO COMPLETA ===');
        
        // Verificar se precisa revis√£o
        const precisaRevisao = this.sistemaRevisao.precisaRevisao();
        const estatisticas = this.sistemaRevisao.obterEstatisticas();
        
        console.log(`üìä Epis√≥dio #${estatisticas.episodios_processados + 1}`);
        console.log(`ü§ñ N√≠vel autonomia: ${estatisticas.nivel_autonomia}/10`);
        console.log(`üìù Precisa revis√£o: ${precisaRevisao ? 'SIM' : 'N√ÉO'}`);
        
        try {
            // 1. Gerar roteiro
            const roteiro = this.gerarRoteiro();
            
            // 2. Criar metadados do epis√≥dio
            const metadados = {
                episodio_numero: estatisticas.episodios_processados + 1,
                data_geracao: new Date().toISOString(),
                nivel_autonomia: estatisticas.nivel_autonomia,
                precisa_revisao: precisaRevisao,
                areas_atencao: estatisticas.areas_problematicas.slice(0, 3)
            };

            if (precisaRevisao) {
                // MODO REVIS√ÉO: Gerar arquivos para corre√ß√£o
                console.log('\nüìù === MODO REVIS√ÉO ATIVADO ===');
                console.log('Sistema ainda est√° aprendendo...');
                
                const arquivosRevisao = this.sistemaRevisao.gerarVersaoRevisao(roteiro, metadados);
                
                return {
                    modo: 'revisao',
                    roteiro_original: roteiro,
                    arquivos: arquivosRevisao,
                    metadados,
                    proximos_passos: [
                        '1. Edite o arquivo *_corrigido.md com suas corre√ß√µes',
                        '2. Execute: npm run processar-correcao [nome-arquivo]',
                        '3. Sistema aprender√° com suas mudan√ßas autom√°ticamente'
                    ]
                };
                
            } else {
                // MODO AUT√îNOMO: Gerar diretamente
                console.log('\nü§ñ === MODO AUT√îNOMO ATIVADO ===');
                console.log('Sistema funcionando independentemente!');
                
                const nomeArquivo = this.salvarRoteiro(roteiro);
                
                if (opcoes.gerarAudio) {
                    console.log('üéµ Gerando √°udios automaticamente...');
                    const infoAudios = await this.integracaoIA.processarRoteiroCompleto(
                        path.join(__dirname, nomeArquivo)
                    );
                    
                    return {
                        modo: 'autonomo',
                        roteiro: nomeArquivo,
                        audios: infoAudios,
                        metadados
                    };
                }

                return {
                    modo: 'autonomo',
                    roteiro: nomeArquivo,
                    metadados
                };
            }

        } catch (error) {
            console.error('‚ùå Erro na gera√ß√£o completa:', error.message);
            throw error;
        }
    }

    // M√©todo para substituir vari√°veis undefined no roteiro
    processarTextoRoteiro(texto) {
        if (!texto) return '';
        
        // Substituir vari√°veis undefined comuns
        texto = texto.replace(/\bundefined\b/g, '');
        texto = texto.replace(/\$\{[^}]*undefined[^}]*\}/g, '');
        texto = texto.replace(/\$\{.*?\}/g, (match) => {
            console.warn('‚ö†Ô∏è Vari√°vel n√£o resolvida:', match);
            return '';
        });
        
        // Limpar espa√ßos extras
        texto = texto.replace(/\s+/g, ' ').trim();
        
        return texto;
    }

    // M√©todo para obter nome correto dos personagens
    obterNomePersonagem(personagem) {
        if (typeof personagem === 'string') {
            if (personagem.toLowerCase().includes('taina') || personagem.toLowerCase().includes('tain√°')) {
                return 'Tain√°';
            }
            if (personagem.toLowerCase().includes('iray') || personagem.toLowerCase().includes('ira√≠')) {
                return 'Ira√≠';
            }
        }
        return personagem?.nome || personagem || 'Apresentador';
    }

    // M√©todo para aplicar caracter√≠sticas dos personagens
    aplicarCaracteristicasPersonagem(texto, nomePersonagem) {
        if (!texto) return '';
        
        // Buscar personagem no arquivo JSON
        const personagem = this.personagens.find(p => 
            p.nome.toLowerCase() === nomePersonagem.toLowerCase()
        );
        
        if (!personagem) return texto;
        
        // Reduzir uso excessivo de "oxe" e "vichi"
        if (nomePersonagem === 'Tain√°') {
            // Substituir algumas ocorr√™ncias de "oxe" por varia√ß√µes
            texto = texto.replace(/\boxe\b/gi, (match, index, string) => {
                const random = Math.random();
                if (random < 0.4) return 'eita';
                if (random < 0.6) return 'n√©';
                return match; // Manter algumas
            });
        }
        
        if (nomePersonagem === 'Ira√≠') {
            // Substituir "vichi" por varia√ß√µes mais manauaras
            texto = texto.replace(/\bvichi\b/gi, (match, index, string) => {
                const random = Math.random();
                if (random < 0.5) return 'rapaz';
                if (random < 0.7) return 'pois √©';
                return match; // Manter algumas
            });
            
            // Garantir que nome est√° correto
            texto = texto.replace(/\biray\b/gi, 'Ira√≠');
        }
        
        return texto;
    }

    // M√©todos para gerar g√≠rias dos personagens
    gerarGiriaTaina() {
        const girias = ['eita', 'n√©', 'meu povo', 'massa', 'danado', 'maninho'];
        return girias[Math.floor(Math.random() * girias.length)];
    }

    gerarGiriaIrai() {
        const girias = ['rapaz', 'pois √©', 'n√©', 'caboco', 'massa', 'maninho'];
        return girias[Math.floor(Math.random() * girias.length)];
    }

    // M√©todos que estavam faltando para as vari√°veis do template
    obterApresentador() {
        return Math.random() > 0.5 ? 'Tain√°' : 'Ira√≠';
    }

    obterApresentadorPrincipal() {
        return 'Tain√°';
    }

    obterApresentadorSecundario() {
        return 'Ira√≠';
    }

    gerarComentarioBoiTaina() {
        const comentarios = [
            "Garantido no cora√ß√£o sempre, n√© meu povo!",
            "Vermelho e branco √© a nossa paix√£o!",
            "O sangue ind√≠gena pulsa forte no Festival!",
            "Parintins √© magia pura, maninho!"
        ];
        return comentarios[Math.floor(Math.random() * comentarios.length)];
    }

    gerarComentarioBoiIrai() {
        const comentarios = [
            "Rapaz, os dois bois s√£o impressionantes!",
            "Pois √©, n√©? O Festival √© patrim√¥nio nosso!",
            "√â massa ver toda essa cultura amaz√¥nica!",
            "Barbaridade, que espet√°culo!"
        ];
        return comentarios[Math.floor(Math.random() * comentarios.length)];
    }

    gerarComentarioIraiManchete() {
        const comentarios = [
            "Pois √©, rapaz... a situa√ß√£o t√° bem assim mesmo.",
            "√â bem assim que acontece aqui em Manaus, n√©?",
            "Rapaz, isso a√≠ √© t√≠pico da nossa regi√£o.",
            "Caboco, essa hist√≥ria √© interessante mesmo!"
        ];
        return comentarios[Math.floor(Math.random() * comentarios.length)];
    }

    gerarComentarioTaina() {
        const comentarios = [
            "Eita, meu povo! Que hist√≥ria essa!",
            "N√©, pessoal? A gente sempre traz o que t√° rolando!",
            "Massa demais essa not√≠cia!",
            "Maninho, isso a√≠ √© importante de saber!"
        ];
        return comentarios[Math.floor(Math.random() * comentarios.length)];
    }

    gerarComentarioRivalidade() {
        const rivalidades = [
            "**Tain√°:** Ira√≠, voc√™ tem que escolher um lado no Festival!\\n**Ira√≠:** Rapaz, os dois bois s√£o bonitos, n√©?",
            "**Ira√≠:** Essa Tain√° n√£o sossega com o Garantido!\\n**Tain√°:** N√© que √©! Vermelho e branco no cora√ß√£o!"
        ];
        return rivalidades[Math.floor(Math.random() * rivalidades.length)];
    }

    gerarDespedidaConjunta() {
        const despedidas = [
            "**Tain√°:** Valeu, meu povo!\\n**Ira√≠:** At√© a pr√≥xima, pessoal!",
            "**Ira√≠:** Foi massa estar com voc√™s!\\n**Tain√°:** BubuiA News sempre no ar!",
            "**Tain√°:** Comenta a√≠ da sua rede!\\n**Ira√≠:** E n√£o esque√ßam de compartilhar!"
        ];
        return despedidas[Math.floor(Math.random() * despedidas.length)];
    }

    gerarEncerramentoTaina() {
        const encerramentos = [
            "Eita, meu povo! Foi massa demais estar com voc√™s hoje!",
            "N√©, pessoal? O BubuiA News t√° sempre aqui pra voc√™s!",
            "Massa! At√© o pr√≥ximo epis√≥dio, maninho!"
        ];
        return encerramentos[Math.floor(Math.random() * encerramentos.length)];
    }

    gerarEncerramentoIrai() {
        const encerramentos = [
            "Pois √©, n√©? Foi √≥timo estar aqui com voc√™s hoje!",
            "Rapaz, sempre bom conversar com voc√™s!",
            "√â bem assim mesmo, caboco! At√© a pr√≥xima!"
        ];
        return encerramentos[Math.floor(Math.random() * encerramentos.length)];
    }

    gerarDialogoCultura() {
        const dialogos = [
            "**Tain√°:** A floresta ensina quem sabe escutar, n√© maninho?\\n**Ira√≠:** √â verdade! Essa sabedoria ancestral √© impressionante.",
            "**Ira√≠:** Conta a√≠ sobre essas tradi√ß√µes de Parintins, Tai.\\n**Tain√°:** Eita! √â muita hist√≥ria bonita do meu povo!"
        ];
        return dialogos[Math.floor(Math.random() * dialogos.length)];
    }

    gerarNoticia1() {
        const noticias = [
            "Prefeitura anuncia obras na Constantino Nery para melhorar tr√¢nsito",
            "Teatro Amazonas recebe espet√°culo regional neste fim de semana",
            "Mercado Municipal passa por revitaliza√ß√£o em nova fase"
        ];
        return noticias[Math.floor(Math.random() * noticias.length)];
    }

    gerarNoticia2() {
        const noticias = [
            "Festival de Parintins divulga programa√ß√£o oficial de 2025",
            "Feira de artesanato amaz√¥nico acontece na Ponta Negra",
            "Centro Cultural recebe exposi√ß√£o sobre cultura ind√≠gena"
        ];
        return noticias[Math.floor(Math.random() * noticias.length)];
    }

    gerarNoticia3() {
        const noticias = [
            "Chuvas causam alagamentos pontuais na Zona Leste",
            "Inaugura√ß√£o de nova unidade de sa√∫de na Compensa",
            "Projeto de preserva√ß√£o do Meeting das √Åguas ganha for√ßa"
        ];
        return noticias[Math.floor(Math.random() * noticias.length)];
    }

    gerarNoticiaEsporte() {
        const noticias = [
            "Nacional prepara elenco para temporada 2025",
            "Fast Clube anuncia contrata√ß√µes para a S√©rie D",
            "Campeonato Amazonense divulga tabela de jogos"
        ];
        return noticias[Math.floor(Math.random() * noticias.length)];
    }

    obterListaGiriasTaina() {
        return "eita, n√©, meu povo, massa, danado, maninho, curumim";
    }

    obterListaGiriasIrai() {
        return "rapaz, pois √©, n√©, caboco, massa, maninho, barbaridade";
    }

    gerarManchetePrincipal() {
        const manchetes = [
            "Obras na Constantino Nery prometem melhorar tr√¢nsito",
            "Festival de Parintins 2025 ter√° novidades especiais",
            "Teatro Amazonas completa mais um ano de hist√≥ria",
            "Mercado Municipal ganha cara nova com revitaliza√ß√£o"
        ];
        return manchetes[Math.floor(Math.random() * manchetes.length)];
    }

    gerarRespostaTaina() {
        const respostas = [
            "Eita, n√©! √â bem assim mesmo!",
            "Massa, Ira√≠! Concordo contigo!",
            "N√©, meu povo? Exatamente isso!"
        ];
        return respostas[Math.floor(Math.random() * respostas.length)];
    }

    gerarRespostaIrai() {
        const respostas = [
            "Pois √©, Tai! √â exatamente assim!",
            "Rapaz, voc√™ falou tudo!",
            "√â bem assim mesmo, n√©?"
        ];
        return respostas[Math.floor(Math.random() * respostas.length)];
    }

    obterDuracao() {
        return "15-20 minutos";
    }

    obterTimestamp() {
        return new Date().toISOString();
    }

    obterTemasPrincipais() {
        return "Not√≠cias locais, cultura amaz√¥nica, eventos regionais";
    }

    obterTimeFoco() {
        return Math.random() > 0.5 ? "Garantido" : "Caprichoso";
    }

    obterEfeitosSonoros() {
        return "Som ambiente de floresta, vinhetas regionais";
    }

    obterObservacoesTecnicas() {
        return "Pausas naturais, varia√ß√£o de velocidade por personagem, √™nfase em g√≠rias regionais";
    }

    obterNumeroEpisodio() {
        // Calcular n√∫mero do epis√≥dio baseado na data ou usar contador
        const hoje = new Date();
        const inicioAno = new Date(hoje.getFullYear(), 0, 1);
        const diasDoAno = Math.floor((hoje - inicioAno) / (24 * 60 * 60 * 1000));
        return Math.floor(diasDoAno / 7) + 1; // Epis√≥dio por semana
    }

    obterDuracao() {
        return "15-20 minutos";
    }

    obterTimestamp() {
        return new Date().toISOString();
    }

    obterTemasPrincipais() {
        return "Not√≠cias locais, cultura amaz√¥nica, eventos regionais";
    }

    obterTimeFoco() {
        return "Nacional";
    }

    obterEfeitosSonoros() {
        return "Som ambiente de floresta, vinhetas regionais";
    }

    // === NOVOS M√âTODOS CONTEXTUAIS ===
    
    async inicializarSistemasContextuais() {
        if (!this.classificadorContextual) {
            const ClassificadorContextual = require('./classificadorContextual');
            const GeradorComentariosContextuais = require('./comentariosContextuais');
            const MixadorAutomatico = require('./mixadorAutomatico');
            
            this.classificadorContextual = new ClassificadorContextual();
            this.geradorComentarios = new GeradorComentariosContextuais();
            this.mixadorAutomatico = new MixadorAutomatico();
        }
    }

    async processarNoticiaComContexto(noticia) {
        await this.inicializarSistemasContextuais();
        
        // 1. Classificar contexto automaticamente
        const contexto = await this.classificadorContextual.classificarNoticia(noticia);
        
        // 2. Obter configura√ß√£o de voz para o contexto
        const configVoz = this.classificadorContextual.obterConfiguracaoVoz(contexto);
        
        // 3. Processar com coment√°rios contextuais
        const noticiaProcessada = await this.geradorComentarios.processarNoticiaComReacao(noticia, contexto);
        
        return {
            ...noticiaProcessada,
            contexto,
            configVoz
        };
    }

    async gerarEpisodioCompleto() {
        try {
            console.log('üéôÔ∏è === BUBUIA NEWS - GERA√á√ÉO COMPLETA ===');
            console.log(`üìä Epis√≥dio #${this.obterNumeroEpisodio()}`);
            console.log(`ü§ñ N√≠vel autonomia: ${this.sistemaRevisao?.obterNivelAutonomia?.() || 0}/10`);
            console.log(`üìù Precisa revis√£o: ${this.sistemaRevisao?.precisaRevisao?.() ? 'SIM' : 'N√ÉO'}`);

            // 1. Gerar roteiro com contextos
            const roteiroComContextos = await this.gerarRoteiroContextual();
            
            // 2. Gerar √°udio com mixagem autom√°tica
            const audioCompleto = await this.gerarAudioCompleto(roteiroComContextos);
            
            // 3. Sistema de revis√£o
            const analise = this.sistemaRevisao?.analisarEpisodio?.(roteiroComContextos, audioCompleto) || {
                qualidade: 'boa',
                sugestoes: [],
                status: 'aprovado'
            };
            
            return {
                roteiro: roteiroComContextos,
                audio: audioCompleto,
                analise,
                timestamp: new Date().toISOString()
            };
            
        } catch (error) {
            console.error('‚ùå Erro na gera√ß√£o completa:', error.message);
            throw error;
        }
    }

    async gerarRoteiroContextual() {
        // Gerar roteiro base
        const roteiroBase = this.gerarRoteiro();
        
        // Processar not√≠cias com contextos
        const noticiasProcessadas = [];
        const noticias = [
            this.gerarManchetePrincipal(),
            this.gerarMancheteSecundaria(),
            this.gerarMancheteTerciaria(),
            this.gerarNoticiaEsporte()
        ];
        
        for (let noticia of noticias) {
            const processada = await this.processarNoticiaComContexto(noticia);
            noticiasProcessadas.push(processada);
        }
        
        // Aplicar coment√°rios contextuais no roteiro
        let roteiroFinal = roteiroBase;
        noticiasProcessadas.forEach((noticia, index) => {
            if (noticia.reacoes && noticia.reacoes.length > 0) {
                // Inserir rea√ß√µes ap√≥s cada not√≠cia
                const reacaoTexto = noticia.reacoes.map(r => 
                    `**${r.personagem.charAt(0).toUpperCase() + r.personagem.slice(1)}:** ${r.comentario}`
                ).join('\n');
                
                // Substituir placeholder ou adicionar ap√≥s not√≠cia
                const noticiaOriginal = noticia.noticia;
                const noticiaComReacao = `${noticiaOriginal}\n\n${reacaoTexto}`;
                roteiroFinal = roteiroFinal.replace(noticiaOriginal, noticiaComReacao);
            }
        });
        
        return {
            texto: roteiroFinal,
            contextos: noticiasProcessadas,
            metadados: {
                titulo: `BubuiA News - ${this.obterDataFormatada()}`,
                episodio: this.obterNumeroEpisodio(),
                contextos_utilizados: noticiasProcessadas.map(n => n.contexto)
            }
        };
    }

    async gerarAudioCompleto(roteiroData) {
        await this.inicializarSistemasContextuais();
        
        console.log('üéµ Modo simula√ß√£o - gerando timeline de √°udio...');
        
        // 1. Quebrar roteiro em segmentos
        const segmentos = this.quebrarRoteiroEmSegmentos(roteiroData.texto);
        
        // 2. Simular √°udio para cada segmento com configura√ß√£o contextual
        const segmentosAudio = [];
        
        for (let segmento of segmentos) {
            const contexto = this.identificarContextoSegmento(segmento, roteiroData.contextos);
            const configVoz = contexto ? contexto.configVoz : this.obterConfiguracaoVozPadrao();
            
            const audioSegmento = await this.simularAudioSegmento(segmento, configVoz);
            segmentosAudio.push(audioSegmento);
        }
        
        // 3. Gerar relat√≥rio em vez de mixar √°udio real
        const relatorioAudio = this.gerarRelatorioAudio(segmentosAudio, roteiroData.metadados);
        
        return relatorioAudio;
    }

    async simularAudioSegmento(segmento, configVoz) {
        // Normalizar nome do personagem
        let personagemKey = segmento.personagem.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
        if (personagemKey.includes('taina')) personagemKey = 'taina';
        else if (personagemKey.includes('irai')) personagemKey = 'irai';

        // TODO: Integrar com ElevenLabs ou outro TTS real
        // Aqui voc√™ pode chamar: await integracaoIA.gerarAudio(segmento.texto, personagemKey, { configVoz });
        // Por enquanto, simular
        const nomeArquivo = `temp_${personagemKey}_${segmento.ordem}.mp3`;
        const caminhoArquivo = require('path').join(__dirname, 'temp_audio', nomeArquivo);
        const duracaoEstimada = segmento.texto.length * 0.05; // ~50ms por caractere

        return {
            arquivo: caminhoArquivo,
            duracao: duracaoEstimada,
            personagem: personagemKey,
            bloco: segmento.bloco,
            texto: segmento.texto,
            configVoz: configVoz
        };
    }

    gerarRelatorioAudio(segmentosAudio, metadados) {
        const duracaoTotal = segmentosAudio.reduce((total, seg) => total + seg.duracao, 0);
        const minutos = Math.floor(duracaoTotal / 60);
        const segundos = Math.floor(duracaoTotal % 60);
        
        // Contagem correta por personagem - verificar valores exatos
        const tainaSegmentos = segmentosAudio.filter(s => s.personagem === 'taina');
        const iraiSegmentos = segmentosAudio.filter(s => s.personagem === 'irai');
        
        console.log(`üîç Debug contagem no relat√≥rio:`);
        console.log(`   Total de segmentos: ${segmentosAudio.length}`);
        console.log(`   Tain√° encontrados: ${tainaSegmentos.length}`);
        console.log(`   Ira√≠ encontrados: ${iraiSegmentos.length}`);
        
        // Verificar personagens √∫nicos
        const personagensUnicos = [...new Set(segmentosAudio.map(s => s.personagem))];
        console.log(`   Personagens: ${personagensUnicos.join(', ')}`);
        
        const relatorio = {
            tipo: 'simulacao',
            segmentos: segmentosAudio.length,
            duracao_total: `${minutos}:${segundos.toString().padStart(2, '0')}`,
            duracao_segundos: duracaoTotal,
            personagens: {
                taina: tainaSegmentos.length,
                irai: iraiSegmentos.length
            },
            blocos: [...new Set(segmentosAudio.map(s => s.bloco))],
            arquivo_simulado: `bubuia_news_${new Date().toISOString().split('T')[0]}_completo.mp3`,
            detalhes: segmentosAudio.slice(0, 5) // Primeiros 5 para debug
        };
        
        console.log(`üéµ Simula√ß√£o conclu√≠da: ${relatorio.segmentos} segmentos, ${relatorio.duracao_total}`);
        console.log(`üë© Tain√°: ${relatorio.personagens.taina} falas | üë® Ira√≠: ${relatorio.personagens.irai} falas`);
        
        // Debug adicional se contagem zerada
        if (relatorio.personagens.taina === 0 && relatorio.personagens.irai === 0) {
            console.log('‚ö†Ô∏è Simula√ß√£o n√£o encontrou falas dos apresentadores!');
            console.log('üîç Tipos de segmentos encontrados:');
            const tipos = [...new Set(segmentosAudio.map(s => s.personagem))];
            tipos.forEach(tipo => {
                const count = segmentosAudio.filter(s => s.personagem === tipo).length;
                console.log(`   - ${tipo}: ${count} segmentos`);
            });
        }
        
        return relatorio;
    }

    quebrarRoteiroEmSegmentos(roteiro) {
        const linhas = roteiro.split('\n');
        const segmentos = [];
        let blocoAtual = 'introducao';
        
        console.log('üîç Analisando roteiro linha por linha...');
        
        linhas.forEach((linha, index) => {
            // Identificar blocos
            if (linha.includes('## ')) {
                if (linha.includes('MANCHETES')) blocoAtual = 'manchetes';
                else if (linha.includes('ESPORTES')) blocoAtual = 'esportes';
                else if (linha.includes('CULTURA')) blocoAtual = 'cultura';
                else if (linha.includes('RECADO')) blocoAtual = 'recados';
                else if (linha.includes('ENCERRAMENTO')) blocoAtual = 'encerramento';
                else if (linha.includes('INTRODU√á√ÉO')) blocoAtual = 'introducao';
                else if (linha.includes('CARD√ÅPIO')) blocoAtual = 'cardapio';
                console.log(`üìç Bloco encontrado: ${blocoAtual} (linha ${index + 1})`);
            }
            
            // Tentar m√∫ltiplos patterns para capturar falas
            let matchPersonagem = null;
            
            // Pattern principal: **Nome:**
            matchPersonagem = linha.match(/\*\*(Tain√°|Ira√≠):\*\*\s*(.+)/);
            
            if (!matchPersonagem) {
                // Pattern alternativo: **Nome:** com espa√ßos
                matchPersonagem = linha.match(/\*\*\s*(Tain√°|Ira√≠)\s*:\s*\*\*\s*(.+)/);
            }
            
            if (!matchPersonagem) {
                // Pattern sem markdown: Nome:
                matchPersonagem = linha.match(/(Tain√°|Ira√≠):\s*(.+)/);
            }
            
            if (matchPersonagem && matchPersonagem[2] && matchPersonagem[2].trim().length > 3) {
                // Normalizar nomes para sem acento (consist√™ncia)
                const personagemNormalizado = matchPersonagem[1].toLowerCase()
                    .replace('√°', 'a')
                    .replace('√≠', 'i');
                
                const texto = matchPersonagem[2].trim();
                
                segmentos.push({
                    personagem: personagemNormalizado, // 'taina' ou 'irai' sem acento
                    texto,
                    bloco: blocoAtual,
                    ordem: segmentos.length,
                    linha: index + 1
                });
                
                console.log(`üí¨ Fala capturada: ${personagemNormalizado} (linha ${index + 1}): "${texto.substring(0, 30)}..."`);
            }
        });
        
        console.log(`üìù Roteiro quebrado em ${segmentos.length} segmentos`);
        
        // Contagem por personagem - sem filtro adicional
        const tainaFalas = segmentos.filter(s => s.personagem === 'taina').length;
        const iraiFalas = segmentos.filter(s => s.personagem === 'irai').length;
        
        console.log(`üë© Falas da Tain√°: ${tainaFalas}`);
        console.log(`üë® Falas do Ira√≠: ${iraiFalas}`);
        
        // Debug: mostrar primeiras linhas do roteiro se contagem zerada
        if (tainaFalas === 0 && iraiFalas === 0) {
            console.log('‚ö†Ô∏è Contagem zerada! Primeiras 10 linhas do roteiro:');
            linhas.slice(0, 10).forEach((linha, i) => {
                console.log(`${i + 1}: ${linha}`);
            });
            
            console.log('\nüîç Segmentos detectados mas n√£o contados:');
            segmentos.slice(0, 5).forEach(seg => {
                console.log(`- ${seg.personagem}: "${seg.texto.substring(0, 30)}..."`);
            });
        }
        
        return segmentos; // Retornar todos os segmentos
    }

    identificarContextoSegmento(segmento, contextos) {
        // Buscar contexto baseado no texto do segmento
        for (let contexto of contextos) {
            if (segmento.texto.includes(contexto.noticia.substring(0, 20))) {
                return contexto;
            }
        }
        return null;
    }

    async gerarAudioSegmento(segmento, configVoz) {
        // Normalizar nome do personagem
        let personagemKey = segmento.personagem.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
        if (personagemKey.includes('taina')) personagemKey = 'taina';
        else if (personagemKey.includes('irai')) personagemKey = 'irai';

        // TODO: Integrar com ElevenLabs ou outro TTS real
        // Aqui voc√™ pode chamar: await integracaoIA.gerarAudio(segmento.texto, personagemKey, { configVoz });
        // Por enquanto, simular
        const nomeArquivo = `temp_${personagemKey}_${segmento.ordem}.mp3`;
        const caminhoArquivo = require('path').join(__dirname, 'temp_audio', nomeArquivo);
        const duracaoEstimada = segmento.texto.length * 0.05; // ~50ms por caractere

        return {
            arquivo: caminhoArquivo,
            duracao: duracaoEstimada,
            personagem: personagemKey,
            bloco: segmento.bloco,
            texto: segmento.texto,
            configVoz: configVoz
        };
    }

    // M√©todos que estavam sendo chamados no gerarRoteiro mas n√£o existiam
    gerarClimaManaus() {
        const climas = [
            "Sol pela manh√£ com pancadas de chuva √† tarde - o cl√°ssico de Manaus!",
            "Calor de 34¬∞C com sensa√ß√£o t√©rmica de 42¬∞C - preparem o ventilador!",
            "Chuva forte prevista para hoje - saiam com guarda-chuva!",
            "Tempo seco e muito calor - hidratem-se, meu povo!"
        ];
        return climas[Math.floor(Math.random() * climas.length)];
    }

    gerarTransitoManaus() {
        const transitos = [
            "Constantino Nery com lentid√£o no sentido Centro - novidade nenhuma!",
            "Torquato Tapaj√≥s fluindo bem por enquanto",
            "Djalma Batista com os buracos de sempre - cuidado a√≠!",
            "Zona Leste complicada por conta da chuva da madrugada"
        ];
        return transitos[Math.floor(Math.random() * transitos.length)];
    }

    gerarPiadaLocal() {
        const piadas = [
            "Tr√¢nsito mais lento que boto subindo corredeira!",
            "Chuva que nem enchente de 2012!",
            "Calor de derreter at√© o ferro do Teatro Amazonas!",
            "Buraco na rua maior que piscina natural!"
        ];
        return piadas[Math.floor(Math.random() * piadas.length)];
    }

    gerarEventoDestaque() {
        const eventos = [
            "Festival gastron√¥mico na Ponta Negra",
            "Show regional no Largo de S√£o Sebasti√£o", 
            "Feira de artesanato no Centro Hist√≥rico",
            "Apresenta√ß√£o cultural no Teatro Amazonas"
        ];
        return eventos[Math.floor(Math.random() * eventos.length)];
    }

    gerarMancheteSecundaria() {
        const manchetes = [
            "Mercado Municipal inaugura nova ala de produtos regionais",
            "Universidade Federal do Amazonas anuncia novos cursos",
            "Porto de Manaus registra aumento no movimento de cargas",
            "Centro Hist√≥rico recebe projeto de revitaliza√ß√£o urbana"
        ];
        return manchetes[Math.floor(Math.random() * manchetes.length)];
    }

    gerarMancheteTerciaria() {
        const manchetes = [
            "Projeto preserva l√≠nguas ind√≠genas da regi√£o amaz√¥nica",
            "Nova linha de √¥nibus conecta bairros da Zona Norte",
            "Feira de tecnologia amaz√¥nica acontece no pr√≥ximo m√™s",
            "Artes√£os locais ganham espa√ßo em shopping da cidade"
        ];
        return manchetes[Math.floor(Math.random() * manchetes.length)];
    }

    gerarClimaRelevante() {
        // S√≥ gera clima quando √© algo realmente relevante
        const eventosClimaticos = [
            "üåä N√≠vel do Rio Negro atinge cota de aten√ß√£o",
            "‚òî Chuvas intensas causam alagamentos em pontos da cidade", 
            "üåµ Estiagem severa afeta abastecimento de √°gua",
            "‚õàÔ∏è Temporal derruba √°rvores e causa falta de energia",
            "üå°Ô∏è Temperatura m√°xima bate recorde hist√≥rico de 42¬∞C"
        ];
        
        // 30% de chance de ter clima relevante
        if (Math.random() < 0.3) {
            return eventosClimaticos[Math.floor(Math.random() * eventosClimaticos.length)];
        } else {
            return ""; // Sem not√≠cia de clima
        }
    }

    gerarCuriosidadeRegional() {
        const curiosidades = [
            "Voc√™ sabia que o Meeting das √Åguas pode ser visto do espa√ßo?",
            "O Teatro Amazonas foi constru√≠do no auge da borracha!",
            "Parintins √© conhecida mundialmente pelo Boi-Bumb√°!",
            "Manaus √© a porta de entrada para a maior floresta do mundo!"
        ];
        return curiosidades[Math.floor(Math.random() * curiosidades.length)];
    }

    executar() {
        console.log('üéôÔ∏è Gerando roteiro do podcast...');
        
        try {
            const roteiro = this.gerarRoteiro();
            const nomeArquivo = this.salvarRoteiro(roteiro);
            
            console.log('üìã Roteiro gerado com sucesso!');
            console.log(`üìÑ Arquivo: ${nomeArquivo}`);
            console.log('üéâ Bom programa!');
            
        } catch (error) {
            console.error('‚ùå Erro ao gerar roteiro:', error.message);
        }
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    const gerador = new GeradorRoteiro();
    
    // Teste do sistema completo
    console.log('üéôÔ∏è === BUBUIA NEWS - SISTEMA COMPLETO ===');
    console.log('üìª Testando nova estrutura de di√°logos...\n');
    
    try {
        const roteiro = gerador.gerarRoteiro();
        const nomeArquivo = gerador.salvarRoteiro(roteiro);
        
        console.log('\nüéâ === TESTE CONCLU√çDO ===');
        console.log(`üìÑ Arquivo: ${nomeArquivo}`);
        console.log('‚úÖ Nova introdu√ß√£o oficial implementada');
        console.log('‚úÖ Sistema de di√°logos espont√¢neos funcionando');
        console.log('‚úÖ Intera√ß√µes com audi√™ncia, editor e locais');
        console.log('‚úÖ Transi√ß√µes naturais para card√°pio');
        console.log('\nüöÄ BubuiA News pronto para decolar!');
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error.message);
    }
}

module.exports = GeradorRoteiro;
        console.log('\nüéâ === TESTE CONCLU√çDO ===');
        console.log(`üìÑ Arquivo: ${nomeArquivo}`);
        console.log('‚úÖ Nova introdu√ß√£o oficial implementada');
        console.log('‚úÖ Sistema de di√°logos espont√¢neos funcionando');
        console.log('‚úÖ Intera√ß√µes com audi√™ncia, editor e locais');
        console.log('‚úÖ Transi√ß√µes naturais para card√°pio');
        console.log('\nüöÄ BubuiA News pronto para decolar!');
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error.message);
    }
}

module.exports = GeradorRoteiro;
